#!/usr/bin/env python
import os
import io
import time

Import("env")
Import("env_modules")

def is_v8_available():
    return env["platform"] != "web"

def check(condition, text):
    if not condition:
        print("Error: " + text)
        Exit(2)

module_path = os.path.dirname(os.path.abspath("jsb.h"))
module_name = os.path.basename(module_path)
javascript_engine = "v8" if is_v8_available() else "quickjs"
websocket_lib = "lws"

print("compiling:", module_name)
print("javascript engine:", javascript_engine)

class CompileDefines:
    def __init__(self, name, value, help = None):
        self.name = name
        self.value = value
        self.help = help

jsb_defines = [
    CompileDefines("JSB_WITH_V8", 1 if javascript_engine == "v8" else 0),
    CompileDefines("JSB_WITH_QUICKJS", 1 if javascript_engine == "quickjs" else 0),
]

def is_defined(name, value):
    for t in jsb_defines:
        if t.name == name:
            return t.value == value
    return False

def set_defined(name, value):
    for t in jsb_defines:
        if t.name == name:
            t.value = value
    check(False, f"can not set value to '{name}' which is not defined")

# def write_file(filename, ostream: io.StringIO):
def write_file(filename, ostream):
    ostream.seek(0)
    content = ostream.read()
    if os.path.exists(filename):
        with open(filename, "rt", encoding="utf-8") as input:
            if input.read() == content:
                print(f"generate {filename}: no diff")
                return
    with open(filename, "wt", encoding="utf-8") as output:
        output.write(content)
        print(f"generate {filename}")

def generate_method_code(output, methodname, indent, filenames):
    output.write(f"const char* GodotJSPorjectPreset::{methodname}(const String& p_filename, size_t& r_len)\n")
    output.write("{\n")
    output.write(indent+"static const char data[] = {\n")
    positions = {}
    cursor = 0
    for sourcename in filenames:
        targetname = filenames[sourcename]
        if len(targetname) == 0:
            targetname = os.path.basename(sourcename)
        targetstart = cursor
        newline = 0
        mtime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(os.path.getmtime(sourcename)))
        with open(sourcename, "rb") as input:
            bytes = input.read()
            length = len(bytes)
            output.write(indent+indent+f"// target: {targetname} length: {length} modified: {mtime}\n")
            output.write(indent+indent)
            cursor += length
            positions[targetname] = (targetstart, cursor - targetstart)
            for byte in bytes:
                output.write(f"0x{byte:02x}, ")
                newline += 1
                if newline >= 64:
                    newline = 0
                    output.write("\n")
                    output.write(indent+indent)
        if newline != 0:
            newline = 0
            output.write("\n")
    output.write("\n")
    output.write(indent+"};\n")
    for targetname in positions:
        start = positions[targetname][0]
        size = positions[targetname][1]
        output.write(indent+f"if (p_filename == \"{targetname}\") {{ r_len = {size}; return data+{start}; }}\n")
    output.write(indent+"r_len = 0;\n")
    output.write(indent+"return nullptr;\n")
    output.write("}\n")

def generate_code(filenames):
    indent = "    "
    output = io.StringIO()
    outfile = "weaver-editor/jsb_project_preset.cpp"
    # with open(outfile, "wt", encoding="utf-8") as output:
    if True:
        output.write("// AUTO-GENERATED\n")
        output.write("\n")
        output.write("#include \"jsb_project_preset.h\"\n")
        generate_method_code(output, "get_source", indent, filenames)
    write_file(outfile, output)

def generate_jsb_gen_header():
    output = io.StringIO()
    if True:
        output.write("// AUTO-GENERATED\n")
        output.write("#ifndef GODOTJS_GEN_H\n")
        output.write("#define GODOTJS_GEN_H\n")
        output.write("\n")
        output.write(f"#define JSB_MODULE_NAME {module_name}\n")
        output.write(f"#define jsb_initialize_module initialize_{module_name}_module\n")
        output.write(f"#define jsb_uninitialize_module uninitialize_{module_name}_module\n")
        output.write("\n")
        first_define = True
        for t in jsb_defines:
            if t.help != None:
                if not first_define:
                    output.write("\n")
                if isinstance(t.help, str):
                    output.write(f"// {t.help}\n")
                elif isinstance(t.help, list):
                    for line in t.help:
                        output.write(f"// {line}\n")
            output.write(f"#define {t.name} {t.value}\n")
            first_define = False
        output.write("\n")
        output.write("#endif\n")
    write_file("jsb.gen.h", output)

env_jsb = env_modules.Clone()
module_obj = []

if javascript_engine == "v8":
    # it seems godot always links MT_StaticRelease even if env["dev_build"]
    # it seems v8_monolith must be compiled with `use_rtti=true` explicitly, or the linker will fail on `v8::ArrayBuffer::Allocator`

    # check existence of v8 (since it's setup manually)
    check(os.path.exists("v8"), "The v8 engine is not found in GodotJS, please build it initially or download the prebuilt v8 library from https://github.com/ialex32x/GodotJS-Dependencies/releases/download/v8_r6/v8_r6.zip")

    if env["platform"] == "macos":
        env.Append(LIBPATH=[f'#modules/{module_name}/v8/macos.arm64.release'])
        env.Append(LINKFLAGS=["-lv8_monolith"])
    elif env["platform"] == "linuxbsd":
        env.Append(LIBS=[File('v8/linux.x86_64.release/libv8_monolith.a')])
    else:
        env.Append(LIBS=[File("v8/windows.x86_64.release/v8_monolith.lib")])
        env.Append(LINKFLAGS=["winmm.lib", "Dbghelp.lib"])

    # platform-specific defines
    if env["platform"] != "ios":
        env_jsb.AppendUnique(CPPDEFINES=["V8_COMPRESS_POINTERS"])
        pass
    
    # env_jsb.AppendUnique(CPPDEFINES=["V8_ENABLE_TURBOFAN"])
    env_jsb.Append(CPPDEFINES=["_ITERATOR_DEBUG_LEVEL=0"])

    # headers
    # env_jsb is enough for compiler, but IDE lookup paths from `env`
    if env.msvc and env["vsproj"]:
        env.Append(CPPPATH=[f"#modules/{module_name}/v8/include"])
    env_jsb.Append(CPPPATH=["v8/include"])
else:
    # quickjs is directly build from source
    env_jsb.add_source_files(module_obj, "quickjs/*.c")
    env_jsb.add_source_files(module_obj, "bridge-quickjs/*.cpp")

env_jsb.add_source_files(module_obj, "bridge-v8/*.cpp")

# lws
if websocket_lib == "lws":
    if env["platform"] == "macos":
        env_jsb.Append(CPPPATH=["lws/macos.arm64.release/include"])
        env.Append(LIBPATH=[f'#modules/{module_name}/lws/macos.arm64.release'])
        env.Append(LINKFLAGS=["-lwebsockets"])
    elif env["platform"] == "linuxbsd":
        env_jsb.Append(CPPPATH=["lws/linux.x86_64.release/include"])
        env.Append(LIBS=[File('lws/linux.x86_64.release/libwebsockets.a')])
    elif env["platform"] == "windows":
        if env.msvc and env["vsproj"]:
            env.Append(CPPPATH=[f"#modules/{module_name}/lws/windows.x86_64.release/include"])
        env_jsb.Append(CPPPATH=["lws/windows.x86_64.release/include"])

        env.Append(LIBS=[File("lws/windows.x86_64.release/websockets.lib")])
    #TODO lws builds on other platforms

# common parts
env_jsb.add_source_files(module_obj, ["register_types.cpp"])
env_jsb.add_source_files(module_obj, "internal/*.cpp")
env_jsb.add_source_files(module_obj, "weaver/*.cpp")

# editor functionalities
if env.editor_build:
    generate_code({
        # editor presets
        "scripts/out/jsb.editor.codegen.js": "",
        "scripts/out/jsb.editor.codegen.js.map": "",
        "scripts/src/jsb.editor.main.ts": "",

        "scripts/out/jsb.editor.main.js": "",
        "scripts/out/jsb.editor.main.js.map": "",
        "scripts/src/jsb.editor.codegen.ts": "",

        "scripts/godot-typings/godot.minimal.d.ts": "",

        "scripts/presets/package.json.txt": "package.json",
        "scripts/presets/tsconfig.json.txt": "tsconfig.json",
        "scripts/presets/gdignore.txt": ".gdignore",
        
        # runtime presets
        "scripts/out/jsb.core.js": "",
        "scripts/out/jsb.core.js.map": "",
        "scripts/src/jsb.core.ts": "",
    })
    env_jsb.add_source_files(module_obj, "weaver-editor/*.cpp")

generate_jsb_gen_header()
env.modules_sources += module_obj
