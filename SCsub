#!/usr/bin/env python
import os
import io
import time
import re

Import("env")
Import("env_modules")

def check(condition, text):
    if not condition:
        print("Error: " + text)
        Exit(2)

prebuilt_deps_url = "https://github.com/ialex32x/GodotJS-Dependencies/releases/download/v8_r9/v8_r9.zip"
module_path = os.path.dirname(os.path.abspath("jsb.h"))
module_name = os.path.basename(module_path)
javascript_engine = "v8" if env["platform"] != "web" else "quickjs"
websocket_lib = "lws" if env["platform"] != "web" else "none"

print("compiling:", module_name)
print("javascript engine:", javascript_engine)
print("websocket lib:", websocket_lib)

class CompileDefines:
    def __init__(self, name, value, help = None):
        self.name = name
        self.value = value
        self.help = help

jsb_defines = [
    CompileDefines("JSB_WITH_V8", 1 if javascript_engine == "v8" else 0),
    CompileDefines("JSB_WITH_QUICKJS", 1 if javascript_engine == "quickjs" else 0),
    CompileDefines("JSB_WITH_LWS", 1 if websocket_lib == "lws" else 0, [
        "NOTE: currently use `libwebsockets` to handle v8 debugger connection since `modules/websocket` fail to handshake with `devtools`", 
        "`devtools` do not response the upgrading request with a `sec-websocket-protocol` header which does not apply the handshake requirements of `WSLPeer`", 
        "and the connection will break immediately by `devtools` if `selected_protocol` is assigned manually in `WSLPeer`", 
    ]),
]

def is_defined(name, value):
    for t in jsb_defines:
        if t.name == name:
            return t.value == value
    return False

def set_defined(name, value):
    for t in jsb_defines:
        if t.name == name:
            t.value = value
    check(False, f"can not set value to '{name}' which is not defined")

def remove_file(filename):
    if os.path.exists(filename):
        print(f"deleting deprecated file {filename}")
        os.remove(filename)

# def write_file(filename, ostream: io.StringIO):
def write_file(filename, ostream):
    ostream.seek(0)
    content = ostream.read()
    if os.path.exists(filename):
        with open(filename, "rt", encoding="utf-8") as input:
            if input.read() == content:
                print(f"generate {filename}: no diff")
                return
    with open(filename, "wt", encoding="utf-8") as output:
        print(f"generating {filename}")
        output.write(content)

def generate_method_code(output, methodname, indent, filenames):
    output.write(f"const char* GodotJSProjectPreset::{methodname}(const String& p_filename, size_t& r_len)\n")
    output.write("{\n")
    output.write(indent+"static const char data[] = {\n")
    positions = {}
    cursor = 0
    for sourcename in filenames:
        targetname = filenames[sourcename]
        if len(targetname) == 0:
            targetname = os.path.basename(sourcename)
        targetstart = cursor
        newline = 0
        mtime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(os.path.getmtime(sourcename)))
        with open(sourcename, "rb") as input:
            bytes = input.read()
            length = len(bytes)
            output.write(indent+indent+f"// target: {targetname} length: {length} modified: {mtime}\n")
            output.write(indent+indent)
            cursor += length
            positions[targetname] = (targetstart, cursor - targetstart)
            for byte in bytes:
                output.write(f"0x{byte:02x}, ")
                newline += 1
                if newline >= 64:
                    newline = 0
                    output.write("\n")
                    output.write(indent+indent)
        if newline != 0:
            newline = 0
            output.write("\n")
    output.write("\n")
    output.write(indent+"};\n")
    for targetname in positions:
        start = positions[targetname][0]
        size = positions[targetname][1]
        output.write(indent+f"if (p_filename == \"{targetname}\") {{ r_len = {size}; return data+{start}; }}\n")
    output.write(indent+"r_len = 0;\n")
    output.write(indent+"return nullptr;\n")
    output.write("}\n")

def read_bundle_version():
    with open("jsb.config.h", "rt", encoding="utf-8") as input:
        regex = r"^#define\s+JSB_BUNDLE_VERSION\s+(\d+)$"
        for line in input:
            matches = re.finditer(regex, line)
            for _, match in enumerate(matches, start=1):
                return match.group(1)
    raise ValueError("no JSB_BUNDLE_VERSION defined in jsb.config.h")

def generate_code(rt_filenames, ed_filenames):
    indent = "    "
    output = io.StringIO()
    
    # delete obsolete files
    remove_file("weaver-editor/jsb_project_preset.cpp")
    remove_file("jsb_project_preset.cpp")

    outfile = "jsb_project_preset.gen.cpp"
    
    # with open(outfile, "wt", encoding="utf-8") as output:
    if True:
        output.write("// AUTO-GENERATED\n")
        output.write("\n")
        output.write("#include \"jsb_project_preset.h\"\n")
        output.write("#include \"jsb.config.h\"\n")
        
        # js.bundle version checker
        output.write(f"static_assert({read_bundle_version()} == JSB_BUNDLE_VERSION, \"obsolete preset data found, please regenerate project sources with scons\");\n")

        # bundled source for runtime
        generate_method_code(output, "get_source_rt", indent, rt_filenames)

        # bundled source for editor
        output.write("#ifdef TOOLS_ENABLED\n")
        generate_method_code(output, "get_source_ed", indent, ed_filenames)
        output.write("#endif\n")
    write_file(outfile, output)

def generate_jsb_gen_header():
    output = io.StringIO()
    if True:
        output.write("// AUTO-GENERATED\n")
        output.write("#ifndef GODOTJS_GEN_H\n")
        output.write("#define GODOTJS_GEN_H\n")
        output.write("\n")
        output.write(f"#define JSB_MODULE_NAME {module_name}\n")
        output.write(f"#define jsb_initialize_module initialize_{module_name}_module\n")
        output.write(f"#define jsb_uninitialize_module uninitialize_{module_name}_module\n")
        output.write("\n")
        first_define = True
        for t in jsb_defines:
            if t.help != None:
                if not first_define:
                    output.write("\n")
                if isinstance(t.help, str):
                    output.write(f"// {t.help}\n")
                elif isinstance(t.help, list):
                    for line in t.help:
                        output.write(f"// {line}\n")
            output.write(f"#define {t.name} {t.value}\n")
            first_define = False
        output.write("\n")
        output.write("#endif\n")
    write_file("jsb.gen.h", output)

def get_godot_version_info():
    try:
        # it's available since godot 4.3
        return env.version_info
    except:
        # fallback to the tricky way
        import os
        import sys

        # We want /methods.py.
        engine_path = os.path.join(os.curdir, "../..")

        sys.path.insert(0, engine_path)
        from methods import get_version_info

        version_info = get_version_info("")
        sys.path.remove(engine_path)
        return version_info

# godot 4.3.1 generates `ActiveProjectItemList_` variable name with the path name (see methods.py)
# it'll fail if the path contains '.' or any other characters invalid as variable name
# detect and rename them for better compatibility
def update_path_for_4_3(old_path):
    new_path = old_path if '.' not in old_path else old_path.replace('.', '_')
    if not os.path.exists(new_path) and os.path.exists(old_path):
        os.rename(old_path, new_path)
    return new_path

version_info = get_godot_version_info()
def check_godot_version_newer_than(major, minor, patch):
    return version_info["major"] > major or (version_info["major"] == major and (version_info["minor"] > minor or (version_info["minor"] == minor and version_info["patch"] >= patch)))

env_jsb = env_modules.Clone()
module_obj = []

print(f"godot engine: {version_info['major']}.{version_info['minor']}")

if javascript_engine == "v8":
    # it seems godot always links MT_StaticRelease even if env["dev_build"]
    # it seems v8_monolith must be compiled with `use_rtti=true` explicitly, or the linker will fail on `v8::ArrayBuffer::Allocator`

    # check existence of v8 (since it's setup manually)
    v8_missing_msg = f"The v8 engine is not found in GodotJS, please build it initially or download the prebuilt v8 library from {prebuilt_deps_url}"
    check(os.path.exists("v8/include/v8.h"), v8_missing_msg)

    if env["platform"] == "macos":
        check(os.path.exists("v8/macos.arm64.release/libv8_monolith.a"), v8_missing_msg)
        env.Append(LIBPATH=[f'#modules/{module_name}/v8/macos.arm64.release'])
        env.Append(LINKFLAGS=["-lv8_monolith"])
    elif env["platform"] == "linuxbsd":
        check(os.path.exists("v8/linux.x86_64.release/libv8_monolith.a"), v8_missing_msg)
        env.Append(LIBS=[File('v8/linux.x86_64.release/libv8_monolith.a')])
    else:
        v8_lib_path = update_path_for_4_3("v8/windows.x86_64.release")
        check(os.path.exists(v8_lib_path+"/v8_monolith.lib"), v8_missing_msg)
        env.Append(LIBS=[File(v8_lib_path+"/v8_monolith.lib")])
        env.Append(LINKFLAGS=["winmm.lib", "Dbghelp.lib"])

    # platform-specific defines
    if env["platform"] != "ios":
        env_jsb.AppendUnique(CPPDEFINES=["V8_COMPRESS_POINTERS"])
        pass
    
    # env_jsb.AppendUnique(CPPDEFINES=["V8_ENABLE_TURBOFAN"])
    env_jsb.Append(CPPDEFINES=["_ITERATOR_DEBUG_LEVEL=0"])

    # headers
    # env_jsb is enough for compiler, but IDE lookup paths from `env`
    if env.msvc and env["vsproj"]:
        env.Append(CPPPATH=[f"#modules/{module_name}/v8/include"])
    env_jsb.Append(CPPPATH=["v8/include"])
else:
    # quickjs is directly build from source
    env_jsb.add_source_files(module_obj, "quickjs/*.c")
    env_jsb.add_source_files(module_obj, "bridge-quickjs/*.cpp")

env_jsb.add_source_files(module_obj, "bridge-v8/*.cpp")

# lws
if websocket_lib == "lws":
    lws_missing_msg = "The prebuilt lws lib is missing? Please build it at first."
    if env["platform"] == "macos":
        check(os.path.exists("lws/macos_arm64_release/libwebsockets.a"), lws_missing_msg)
        env_jsb.Append(CPPPATH=["lws/macos_arm64_release/include"])
        env.Append(LIBPATH=[f'#modules/{module_name}/lws/macos_arm64_release'])
        env.Append(LINKFLAGS=["-lwebsockets"])
    elif env["platform"] == "linuxbsd":
        check(os.path.exists("lws/linux_x86_64_release/libwebsockets.a"), lws_missing_msg)
        env_jsb.Append(CPPPATH=["lws/linux_x86_64_release/include"])
        env.Append(LIBS=[File('lws/linux_x86_64_release/libwebsockets.a')])
    elif env["platform"] == "windows":
        check(os.path.exists("lws/windows_x86_64_release/websockets.lib"), lws_missing_msg)
        if env.msvc and env["vsproj"]:
            env.Append(CPPPATH=[f"#modules/{module_name}/lws/windows_x86_64_release/include"])
        env_jsb.Append(CPPPATH=["lws/windows_x86_64_release/include"])

        env.Append(LIBS=[File("lws/windows_x86_64_release/websockets.lib")])
    #TODO lws builds on other platforms

generate_code({
        # presets for runtime
        "scripts/jsb.bundle/out/jsb.bundle.js": "",
    }, {
        # presets for editor only
        "scripts/jsb.bundle/typings/godot.minimal.d.ts": "",
        "scripts/jsb.bundle/typings/godot.mix.d.ts": "",

        "scripts/jsb.bundle/out/jsb.bundle.d.ts": "",
        "scripts/jsb.bundle/out/jsb.bundle.js.map": "",

        "scripts/presets/package.json.txt": "package.json",
        "scripts/presets/tsconfig.json.txt": "tsconfig.json",
        "scripts/presets/gdignore.txt": ".gdignore",
    })
    
# common parts
env_jsb.add_source_files(module_obj, ["register_types.cpp", "jsb_project_preset.gen.cpp"])
env_jsb.add_source_files(module_obj, "internal/*.cpp")
env_jsb.add_source_files(module_obj, "weaver/*.cpp")

# editor functionalities
if env.editor_build:
    env_jsb.add_source_files(module_obj, "weaver-editor/*.cpp")
    SConscript("weaver-editor/templates/SCsub")

generate_jsb_gen_header()
env.modules_sources += module_obj
