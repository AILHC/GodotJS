"use strict";
;
class jsbb_UnsafeArray {
    constructor() {
        this.items = [];
        this.freelist = [];
    }
    Add(o) {
        const available = this.freelist.length - 1;
        let index;
        if (available >= 0) {
            index = this.freelist[available];
            this.freelist.length = available;
        }
        else {
            index = this.items.length;
        }
        this.items[index] = o;
        return index + 1;
    }
    Get(index) {
        return this.items[index - 1];
    }
    // remove an entry and return it's value
    Remove(index) {
        const abs_index = index - 1;
        const o = this.items[abs_index];
        this.items[abs_index] = undefined;
        this.freelist.push(abs_index);
        return o;
    }
}
const jsbb_kMaxStackSize = 512;
const jsbb_StackPos = {
    Undefined: 0,
    Null: 1,
    True: 2,
    False: 3,
    EmptyString: 4,
    SymbolClass: 5,
    MapClass: 6,
    Exception: 7,
    Num: 8,
};
// Stack for Locals (starts from zero)
class jsbb_Stack {
    constructor() {
        this.frames = [];
        this.values = [];
    }
    get pos() { return this.values.length; }
    // get frame value
    GetValue(pos) {
        return this.values[pos];
    }
    // return stack offset
    Push(val) {
        if (this.values.length >= jsbb_kMaxStackSize) {
            throw new RangeError("stack overflow");
        }
        return this.values.push(val) - 1;
    }
    EnterScope() {
        this.frames.push(this.values.length);
    }
    ExitScope() {
        const frame = this.frames.pop();
        this.values.length = frame;
    }
}
// a wrapper for primitive types (number, string etc.)
class jsbb_Wrapper {
    constructor(target) {
        this.target = target;
    }
}
class jsbb_Globals {
    static isTraceable(o) {
        const type = typeof o;
        return o !== null && type !== "function" && type !== "object";
    }
    constructor() {
        this.handles = new jsbb_UnsafeArray();
    }
    // trace an object (it's weak-referenced by default)
    Add(o) {
        if (!jsbb_Globals.isTraceable(o)) {
            o = new jsbb_Wrapper(o);
        }
        const token = new WeakRef(o);
        const handle_id = this.handles.Add({
            token: token,
            sref: undefined,
        });
        return handle_id;
    }
    // unsafe, must ensure a valid index by yourself
    Remove(handle_id) {
        this.handles.Remove(handle_id);
    }
    // return the original target object in registry
    Get(handle_id) {
        const handle = this.handles.Get(handle_id);
        const target = handle.token.deref();
        if (target instanceof jsbb_Wrapper) {
            return target.target;
        }
        return target;
    }
    SetWeak(handle_id) {
        const handle = this.handles.Get(handle_id);
        handle.sref = undefined;
    }
    SetStrong(handle_id) {
        const handle = this.handles.Get(handle_id);
        handle.sref = handle.token.deref();
    }
}
class jsbb_Registry {
    constructor(opaque) {
        this.watcher = new FinalizationRegistry(function (info) {
            NativeAPI.gc_callback(opaque, info);
        });
    }
    Add(o, opaque) {
        this.watcher.register(o, opaque);
    }
}
function jsbb_ensure(condition) {
    console.assert(condition);
}
class jsbb_External {
    get data() { return this._data; }
    constructor(data) {
        this._data = data;
    }
}
class jsbb_Atom {
    constructor(value) {
        this.value = value;
        this.rc = 1;
    }
}
class jsbb_Engine {
    get stack() { return this._stack; }
    constructor(opaque) {
        this._opaque = 0;
        this.last_error = undefined;
        this._opaque = opaque;
        this._global = {};
        this._stack = new jsbb_Stack();
        this._globals = new jsbb_Globals();
        this._registry = new jsbb_Registry(opaque);
        this._atoms = new jsbb_UnsafeArray();
        jsbb_ensure(this._stack.Push(undefined) === jsbb_StackPos.Undefined);
        jsbb_ensure(this._stack.Push(null) === jsbb_StackPos.Null);
        jsbb_ensure(this._stack.Push(true) === jsbb_StackPos.True);
        jsbb_ensure(this._stack.Push(false) === jsbb_StackPos.False);
        jsbb_ensure(this._stack.Push("") === jsbb_StackPos.EmptyString);
        jsbb_ensure(this._stack.Push(Symbol) === jsbb_StackPos.SymbolClass);
        jsbb_ensure(this._stack.Push(Map) === jsbb_StackPos.MapClass);
        jsbb_ensure(this._stack.Push(null) === jsbb_StackPos.Exception);
        jsbb_ensure(this._stack.pos === jsbb_StackPos.Num);
    }
    Release() {
        this._global = undefined;
        this._stack = undefined;
        this._registry = undefined;
    }
    SetHostPromiseRejectionTracker(cb, data) {
        //TODO
        window.addEventListener("unhandledrejection", function (ev) {
            console.log("unhandled promise rejection");
        });
    }
    NewAtom(stack_pos) {
        return this._atoms.Add(new jsbb_Atom(this._stack.GetValue(stack_pos)));
    }
    NewAtomStr(ptr) {
        let str = NativeAPI.UTF8ToString(ptr);
        return this._atoms.Add(new jsbb_Atom(str));
    }
    DupAtom(atom_id) {
        let atom = this._atoms.Get(atom_id);
        ++atom.rc;
    }
    FreeAtom(atom_id) {
        let atom = this._atoms.Get(atom_id);
        if (--atom.rc == 0) {
            this._atoms.Remove(atom_id);
        }
    }
    StackDup(stack_pos) {
        return this._stack.Push(this._stack.GetValue(stack_pos));
    }
    SetOpaque(stack_pos, opaque) {
        let obj = this._stack.GetValue(stack_pos);
        obj[jsbb_opaque] = opaque;
    }
    GetOpaque(stack_pos) {
        let obj = this._stack.GetValue(stack_pos);
        return obj[jsbb_opaque];
    }
    NewExternal(data) {
        return this._stack.Push(new jsbb_External(data));
    }
    IsExternal(stack_pos) {
        return this._stack.GetValue(stack_pos) instanceof jsbb_External;
    }
    // push global to stack, return it's stack position
    GetGlobalObject() {
        return this._stack.Push(this._global);
    }
    Eval(ptr) {
        eval(NativeAPI.UTF8ToString(ptr));
    }
    // cb: C++ Function Pointer
    NewCFunction(cb, data_pos) {
        const self = this;
        const data = this._stack.GetValue(data_pos);
        return this._stack.Push(function () {
            self._stack.EnterScope();
            // prepare: fixed initial call stack positions
            const rval_pos = self._stack.Push(undefined); // 0 return value (placeholder)
            self._stack.Push(self); // 1 this
            self._stack.Push(data); // 2 data
            self._stack.Push(new.target); // 3 new.target
            // prepare: arguments
            const argc = arguments.length;
            for (let i = 0; i < argc; ++i) {
                self._stack.Push(arguments[i]);
            }
            try {
                if (typeof self.last_error !== "undefined") {
                    self.last_error = undefined;
                    console.error("Last exeption not handled");
                }
                NativeAPI.ccall(self._opaque, cb, argc);
            }
            catch (error) {
                self.last_error = error;
            }
            const rval = self._stack.GetValue(rval_pos);
            // cleanup
            self._stack.ExitScope();
            return rval;
        });
    }
    NewClass() {
        return this._stack.Push(function () { });
    }
    NewObjectProtoClass(proto_pos, obj_opaque) {
        const proto = this._stack.GetValue(proto_pos);
        const obj = new proto.constructor();
        this._registry.Add(obj, obj_opaque);
        return this._stack.Push(obj);
    }
    SetConstructor(func, proto) {
        const p = this._stack.GetValue(proto);
        const f = this._stack.GetValue(func);
        p.constructor = f;
    }
    SetPrototype(proto_pos, parent_pos) {
        const a = this._stack.GetValue(proto_pos);
        const b = this._stack.GetValue(parent_pos);
        a.prototype = b.prototype;
    }
}
// opaque for UniversalBridgeClass
const jsbb_opaque = Symbol();
let engine;
let NativeAPI;
const browser = global || globalThis || window;
class jsbb_runtime {
    static init(api) {
        if (typeof NativeAPI !== "undefined") {
            console.error("Already initialized, do not call it twice");
        }
        NativeAPI = api;
    }
    static NewEngine(opaque) {
        if (typeof engine !== "undefined") {
            throw new Error();
        }
        engine = new jsbb_Engine(opaque);
        return 0;
    }
    static FreeEngine(engine_id) {
        if (engine_id !== 0) {
            throw new Error();
        }
        engine.Release();
        engine = undefined;
    }
    static GetEngine(engine_id) { return engine; }
}
browser["jsbb_runtime"] = jsbb_runtime;
//# sourceMappingURL=data:application/json;base64,