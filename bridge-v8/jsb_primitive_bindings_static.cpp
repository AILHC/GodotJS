// AUTO-GENERATED
#include "jsb_primitive_bindings_static.h"
#if JSB_WITH_STATIC_BINDINGS
#include "jsb_class_info.h"
#include "jsb_transpiler.h"
#include "jsb_v8_helper.h"
#include "jsb_static_binding_util.h"
#include "../internal/jsb_variant_info.h"
#include "../internal/jsb_variant_util.h"
namespace jsb
{

    template<typename T>
    struct FinalizerAccess
    {
        static void dealloc(Environment* environment, void* pointer, bool p_persistent)
        {
            Variant* self = (Variant*) pointer;
            jsb_checkf(Variant::can_convert(self->get_type(), GetTypeInfo<T>::VARIANT_TYPE), "variant type can't convert to %s from %s", Variant::get_type_name(GetTypeInfo<T>::VARIANT_TYPE), Variant::get_type_name(self->get_type()));
            if (!p_persistent)
            {
                Environment::dealloc_variant(self);
            }
        }
    };


    template<typename T>
    struct ConstantAccess
    {
        static void _get(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value(GetTypeInfo<T>::VARIANT_TYPE, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
    };


    template<typename T>
    struct IndexAccess
    {
        static void _set_indexed(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            jsb_check(info.This()->InternalFieldCount() == IF_VariantFieldCount);
            const Variant::Type element_type = Variant::get_indexed_element_type(GetTypeInfo<T>::VARIANT_TYPE);
            if (info.Length() != 2
                || !info[0]->IsInt32()
                || !Realm::can_convert_strict(isolate, context, info[1], element_type))
            {
                jsb_throw(isolate, "bad params");
                return;
            }
            const int32_t index = info[0].As<v8::Int32>()->Value();
            Variant value;
            if (!Realm::js_to_gd_var(isolate, context, info[1], element_type, value))
            {
                jsb_throw(isolate, "bad value");
                return;
            }
            bool r_valid, r_oob;
            Variant* self = (Variant*) info.This()->GetAlignedPointerFromInternalField(IF_Pointer);
            self->set_indexed(index, value, r_valid, r_oob);
            if (!r_valid || r_oob)
            {
                jsb_throw(isolate, "invalid or out of bound");
                return;
            }
        }

        static void _get_indexed(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            jsb_check(info.This()->InternalFieldCount() == IF_VariantFieldCount);
            if (info.Length() != 1
                || !info[0]->IsInt32())
            {
                jsb_throw(isolate, "bad params");
                return;
            }
            const int32_t index = info[0].As<v8::Int32>()->Value();
            bool r_valid, r_oob;
            const Variant* self = (Variant*) info.This()->GetAlignedPointerFromInternalField(IF_Pointer);
            const Variant value = self->get_indexed(index, r_valid, r_oob);
            if (!r_valid || r_oob)
            {
                jsb_throw(isolate, "invalid or out of bound");
                return;
            }
            v8::Local<v8::Value> r_val;
            // nil type is treated as any type
            if (const Variant::Type element_type = Variant::get_indexed_element_type(GetTypeInfo<T>::VARIANT_TYPE);
                !Realm::gd_var_to_js(isolate, context, value, element_type, r_val))
            {
                jsb_throw(isolate, "bad translation");
                return;
            }
            info.GetReturnValue().Set(r_val);
        }
    };

    struct Vector2StaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Vector2();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Vector2 loc_0;
                    if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector2(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector2i loc_0;
                    if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector2(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Vector2(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 5, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_angle(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->angle(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_angle_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->angle_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_angle_to_point(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->angle_to_point(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_direction_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->direction_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->distance_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_squared_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->distance_squared_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->length(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length_squared(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->length_squared(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_limit_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->limit_length(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector2*) thiz)->is_normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector2*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_zero_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector2*) thiz)->is_zero_approx(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector2*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_posmod(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->posmod(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_posmodv(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->posmodv(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_project(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->project(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_lerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->lerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->slerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cubic_interpolate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector2 loc_2;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->cubic_interpolate(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cubic_interpolate_in_time(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector2 loc_2;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            float loc_5;
            if (!StaticBindingUtil<float>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            float loc_6;
            if (!StaticBindingUtil<float>::get(isolate, context, info[6], loc_6))
            {
                jsb_throw(isolate, "bad param at 6");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->cubic_interpolate_in_time(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bezier_interpolate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector2 loc_2;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->bezier_interpolate(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bezier_derivative(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector2 loc_2;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->bezier_derivative(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector2*) thiz)->max_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector2*) thiz)->min_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_move_toward(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->move_toward(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rotated(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->rotated(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_orthogonal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->orthogonal(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_floor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->floor(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_ceil(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->ceil(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_round(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->round(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_aspect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->aspect(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_dot(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->dot(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slide(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->slide(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bounce(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->bounce(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reflect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->reflect(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cross(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2*) thiz)->cross(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sign(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->sign(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clamp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->clamp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clampf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->clampf(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snapped(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->snapped(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snappedf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->snappedf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->min(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_minf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->minf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->max(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_maxf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector2*) thiz)->maxf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_angle(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, Vector2::from_angle(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector2 return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector2 return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                float loc_0;
                Vector2 loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector2 loc_0;
                Vector2 loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector2 loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Vector2 loc_0;
                Vector2 loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2 return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector2 loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2 return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector2 return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "angle"), v8::FunctionTemplate::New(p_env.isolate, &method_angle));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "angle_to"), v8::FunctionTemplate::New(p_env.isolate, &method_angle_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "angle_to_point"), v8::FunctionTemplate::New(p_env.isolate, &method_angle_to_point));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "direction_to"), v8::FunctionTemplate::New(p_env.isolate, &method_direction_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_squared_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_squared_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length"), v8::FunctionTemplate::New(p_env.isolate, &method_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length_squared"), v8::FunctionTemplate::New(p_env.isolate, &method_length_squared));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "limit_length"), v8::FunctionTemplate::New(p_env.isolate, &method_limit_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_is_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_zero_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_zero_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "posmod"), v8::FunctionTemplate::New(p_env.isolate, &method_posmod));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "posmodv"), v8::FunctionTemplate::New(p_env.isolate, &method_posmodv));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "project"), v8::FunctionTemplate::New(p_env.isolate, &method_project));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "lerp"), v8::FunctionTemplate::New(p_env.isolate, &method_lerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slerp"), v8::FunctionTemplate::New(p_env.isolate, &method_slerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cubic_interpolate"), v8::FunctionTemplate::New(p_env.isolate, &method_cubic_interpolate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cubic_interpolate_in_time"), v8::FunctionTemplate::New(p_env.isolate, &method_cubic_interpolate_in_time));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bezier_interpolate"), v8::FunctionTemplate::New(p_env.isolate, &method_bezier_interpolate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bezier_derivative"), v8::FunctionTemplate::New(p_env.isolate, &method_bezier_derivative));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_max_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_min_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "move_toward"), v8::FunctionTemplate::New(p_env.isolate, &method_move_toward));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rotated"), v8::FunctionTemplate::New(p_env.isolate, &method_rotated));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "orthogonal"), v8::FunctionTemplate::New(p_env.isolate, &method_orthogonal));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "floor"), v8::FunctionTemplate::New(p_env.isolate, &method_floor));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "ceil"), v8::FunctionTemplate::New(p_env.isolate, &method_ceil));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "round"), v8::FunctionTemplate::New(p_env.isolate, &method_round));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "aspect"), v8::FunctionTemplate::New(p_env.isolate, &method_aspect));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "dot"), v8::FunctionTemplate::New(p_env.isolate, &method_dot));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slide"), v8::FunctionTemplate::New(p_env.isolate, &method_slide));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bounce"), v8::FunctionTemplate::New(p_env.isolate, &method_bounce));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reflect"), v8::FunctionTemplate::New(p_env.isolate, &method_reflect));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cross"), v8::FunctionTemplate::New(p_env.isolate, &method_cross));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sign"), v8::FunctionTemplate::New(p_env.isolate, &method_sign));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clamp"), v8::FunctionTemplate::New(p_env.isolate, &method_clamp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clampf"), v8::FunctionTemplate::New(p_env.isolate, &method_clampf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snapped"), v8::FunctionTemplate::New(p_env.isolate, &method_snapped));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snappedf"), v8::FunctionTemplate::New(p_env.isolate, &method_snappedf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min"), v8::FunctionTemplate::New(p_env.isolate, &method_min));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "minf"), v8::FunctionTemplate::New(p_env.isolate, &method_minf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max"), v8::FunctionTemplate::New(p_env.isolate, &method_max));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "maxf"), v8::FunctionTemplate::New(p_env.isolate, &method_maxf));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_angle"), v8::FunctionTemplate::New(p_env.isolate, &method_from_angle));
            // enums
            {
                v8::Local<v8::ObjectTemplate> enum_obj = v8::ObjectTemplate::New(p_env.isolate);
                function_template->Set(V8Helper::to_string(p_env.isolate, "Axis"), enum_obj);
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_X"), v8::Int32::New(p_env.isolate, 0));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Y"), v8::Int32::New(p_env.isolate, 1));
            }
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ZERO"), &ConstantAccess<Vector2>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ONE"), &ConstantAccess<Vector2>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "INF"), &ConstantAccess<Vector2>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LEFT"), &ConstantAccess<Vector2>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "RIGHT"), &ConstantAccess<Vector2>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "UP"), &ConstantAccess<Vector2>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DOWN"), &ConstantAccess<Vector2>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector2>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector2>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Vector2>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Vector2iStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Vector2i();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Vector2i loc_0;
                    if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector2i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector2 loc_0;
                    if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector2i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                int loc_0;
                if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                int loc_1;
                if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Vector2i(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 6, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_aspect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2i*) thiz)->aspect(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector2i*) thiz)->max_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector2i*) thiz)->min_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2i*) thiz)->distance_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_squared_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector2i*) thiz)->distance_squared_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector2i*) thiz)->length(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length_squared(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector2i*) thiz)->length_squared(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sign(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->sign(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clamp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->clamp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clampi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->clampi(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snapped(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->snapped(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snappedi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->snappedi(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->min(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_mini(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->mini(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->max(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_maxi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Vector2i*) thiz)->maxi(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector2i return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector2i return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                float loc_0;
                Vector2i loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector2i loc_0;
                Vector2i loc_1;
                if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector2i loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Vector2i loc_0;
                Vector2i loc_1;
                if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2i return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector2i loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2i return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector2i return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i loc_0;
            Vector2i loc_1;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "aspect"), v8::FunctionTemplate::New(p_env.isolate, &method_aspect));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_max_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_min_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_squared_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_squared_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length"), v8::FunctionTemplate::New(p_env.isolate, &method_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length_squared"), v8::FunctionTemplate::New(p_env.isolate, &method_length_squared));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sign"), v8::FunctionTemplate::New(p_env.isolate, &method_sign));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clamp"), v8::FunctionTemplate::New(p_env.isolate, &method_clamp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clampi"), v8::FunctionTemplate::New(p_env.isolate, &method_clampi));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snapped"), v8::FunctionTemplate::New(p_env.isolate, &method_snapped));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snappedi"), v8::FunctionTemplate::New(p_env.isolate, &method_snappedi));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min"), v8::FunctionTemplate::New(p_env.isolate, &method_min));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "mini"), v8::FunctionTemplate::New(p_env.isolate, &method_mini));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max"), v8::FunctionTemplate::New(p_env.isolate, &method_max));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "maxi"), v8::FunctionTemplate::New(p_env.isolate, &method_maxi));
            // enums
            {
                v8::Local<v8::ObjectTemplate> enum_obj = v8::ObjectTemplate::New(p_env.isolate);
                function_template->Set(V8Helper::to_string(p_env.isolate, "Axis"), enum_obj);
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_X"), v8::Int32::New(p_env.isolate, 0));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Y"), v8::Int32::New(p_env.isolate, 1));
            }
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ZERO"), &ConstantAccess<Vector2i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ONE"), &ConstantAccess<Vector2i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MIN"), &ConstantAccess<Vector2i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MAX"), &ConstantAccess<Vector2i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LEFT"), &ConstantAccess<Vector2i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "RIGHT"), &ConstantAccess<Vector2i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "UP"), &ConstantAccess<Vector2i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DOWN"), &ConstantAccess<Vector2i>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector2i>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector2i>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Vector2i>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Rect2StaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Rect2();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Rect2 loc_0;
                    if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Rect2(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Rect2i loc_0;
                    if (!StaticBindingUtil<Rect2i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Rect2(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                Vector2 loc_0;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector2 loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Rect2(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 4)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                float loc_3;
                if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Rect2(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 7, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_center(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Rect2*) thiz)->get_center(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_area(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Rect2*) thiz)->get_area(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_area(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2*) thiz)->has_area(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_point(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2*) thiz)->has_point(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2 loc_0;
            if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersects(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2 loc_0;
            if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2*) thiz)->intersects(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_encloses(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2 loc_0;
            if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2*) thiz)->encloses(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersection(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2 loc_0;
            if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2>::set(isolate, context, ((const Rect2*) thiz)->intersection(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_merge(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2 loc_0;
            if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2>::set(isolate, context, ((const Rect2*) thiz)->merge(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_expand(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2>::set(isolate, context, ((const Rect2*) thiz)->expand(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_grow(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2>::set(isolate, context, ((const Rect2*) thiz)->grow(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_grow_side(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2>::set(isolate, context, ((const Rect2*) thiz)->grow_side((Side) loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_grow_individual(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2>::set(isolate, context, ((const Rect2*) thiz)->grow_individual(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2>::set(isolate, context, ((const Rect2*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_position(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, thiz->position, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_position(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 rval;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, thiz->size, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 rval;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_end(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, thiz->end(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_end(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 rval;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_center"), v8::FunctionTemplate::New(p_env.isolate, &method_get_center));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_area"), v8::FunctionTemplate::New(p_env.isolate, &method_get_area));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_area"), v8::FunctionTemplate::New(p_env.isolate, &method_has_area));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_point"), v8::FunctionTemplate::New(p_env.isolate, &method_has_point));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encloses"), v8::FunctionTemplate::New(p_env.isolate, &method_encloses));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersection"), v8::FunctionTemplate::New(p_env.isolate, &method_intersection));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "merge"), v8::FunctionTemplate::New(p_env.isolate, &method_merge));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "expand"), v8::FunctionTemplate::New(p_env.isolate, &method_expand));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "grow"), v8::FunctionTemplate::New(p_env.isolate, &method_grow));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "grow_side"), v8::FunctionTemplate::New(p_env.isolate, &method_grow_side));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "grow_individual"), v8::FunctionTemplate::New(p_env.isolate, &method_grow_individual));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            // constants
            {
            }
            // operators
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "position"),
                v8::FunctionTemplate::New(p_env.isolate, &get_position),
                v8::FunctionTemplate::New(p_env.isolate, &set_position)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "size"),
                v8::FunctionTemplate::New(p_env.isolate, &get_size),
                v8::FunctionTemplate::New(p_env.isolate, &set_size)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "end"),
                v8::FunctionTemplate::New(p_env.isolate, &get_end),
                v8::FunctionTemplate::New(p_env.isolate, &set_end)
            );
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Rect2>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Rect2iStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Rect2i();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Rect2i loc_0;
                    if (!StaticBindingUtil<Rect2i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Rect2i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Rect2 loc_0;
                    if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Rect2i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                Vector2i loc_0;
                if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector2i loc_1;
                if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Rect2i(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 4)
            {
                int loc_0;
                if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                int loc_1;
                if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                int loc_2;
                if (!StaticBindingUtil<int>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                int loc_3;
                if (!StaticBindingUtil<int>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Rect2i(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 8, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_center(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, ((const Rect2i*) thiz)->get_center(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_area(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Rect2i*) thiz)->get_area(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_area(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2i*) thiz)->has_area(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_point(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2i*) thiz)->has_point(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersects(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2i loc_0;
            if (!StaticBindingUtil<Rect2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2i*) thiz)->intersects(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_encloses(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2i loc_0;
            if (!StaticBindingUtil<Rect2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Rect2i*) thiz)->encloses(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersection(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2i loc_0;
            if (!StaticBindingUtil<Rect2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2i>::set(isolate, context, ((const Rect2i*) thiz)->intersection(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_merge(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Rect2i loc_0;
            if (!StaticBindingUtil<Rect2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2i>::set(isolate, context, ((const Rect2i*) thiz)->merge(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_expand(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2i loc_0;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2i>::set(isolate, context, ((const Rect2i*) thiz)->expand(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_grow(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2i>::set(isolate, context, ((const Rect2i*) thiz)->grow(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_grow_side(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2i>::set(isolate, context, ((const Rect2i*) thiz)->grow_side(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_grow_individual(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            int loc_2;
            if (!StaticBindingUtil<int>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            int loc_3;
            if (!StaticBindingUtil<int>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2i>::set(isolate, context, ((const Rect2i*) thiz)->grow_individual(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Rect2i>::set(isolate, context, ((const Rect2i*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_position(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, thiz->position, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_position(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i rval;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, thiz->size, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i rval;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_end(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Rect2i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2i>::set(isolate, context, thiz->end, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_end(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2i rval;
            if (!StaticBindingUtil<Vector2i>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_center"), v8::FunctionTemplate::New(p_env.isolate, &method_get_center));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_area"), v8::FunctionTemplate::New(p_env.isolate, &method_get_area));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_area"), v8::FunctionTemplate::New(p_env.isolate, &method_has_area));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_point"), v8::FunctionTemplate::New(p_env.isolate, &method_has_point));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encloses"), v8::FunctionTemplate::New(p_env.isolate, &method_encloses));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersection"), v8::FunctionTemplate::New(p_env.isolate, &method_intersection));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "merge"), v8::FunctionTemplate::New(p_env.isolate, &method_merge));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "expand"), v8::FunctionTemplate::New(p_env.isolate, &method_expand));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "grow"), v8::FunctionTemplate::New(p_env.isolate, &method_grow));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "grow_side"), v8::FunctionTemplate::New(p_env.isolate, &method_grow_side));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "grow_individual"), v8::FunctionTemplate::New(p_env.isolate, &method_grow_individual));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            // constants
            {
            }
            // operators
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "position"),
                v8::FunctionTemplate::New(p_env.isolate, &get_position),
                v8::FunctionTemplate::New(p_env.isolate, &set_position)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "size"),
                v8::FunctionTemplate::New(p_env.isolate, &get_size),
                v8::FunctionTemplate::New(p_env.isolate, &set_size)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "end"),
                v8::FunctionTemplate::New(p_env.isolate, &get_end),
                v8::FunctionTemplate::New(p_env.isolate, &set_end)
            );
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Rect2i>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Vector3StaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Vector3();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Vector3 loc_0;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector3(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector3i loc_0;
                    if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector3(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 3)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Vector3(loc_0, loc_1, loc_2);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 9, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector3*) thiz)->min_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector3*) thiz)->max_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_angle_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3*) thiz)->angle_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_signed_angle_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3*) thiz)->signed_angle_to(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_direction_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->direction_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3*) thiz)->distance_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_squared_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3*) thiz)->distance_squared_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3*) thiz)->length(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length_squared(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3*) thiz)->length_squared(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_limit_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->limit_length(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector3*) thiz)->is_normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector3*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_zero_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector3*) thiz)->is_zero_approx(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector3*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clamp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->clamp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clampf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->clampf(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snapped(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->snapped(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snappedf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->snappedf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rotated(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->rotated(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_lerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->lerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->slerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cubic_interpolate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector3 loc_2;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->cubic_interpolate(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cubic_interpolate_in_time(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector3 loc_2;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            float loc_5;
            if (!StaticBindingUtil<float>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            float loc_6;
            if (!StaticBindingUtil<float>::get(isolate, context, info[6], loc_6))
            {
                jsb_throw(isolate, "bad param at 6");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->cubic_interpolate_in_time(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bezier_interpolate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector3 loc_2;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->bezier_interpolate(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bezier_derivative(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector3 loc_2;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->bezier_derivative(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_move_toward(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->move_toward(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_dot(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3*) thiz)->dot(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cross(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->cross(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_outer(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, ((const Vector3*) thiz)->outer(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_floor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->floor(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_ceil(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->ceil(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_round(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->round(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_posmod(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->posmod(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_posmodv(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->posmodv(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_project(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->project(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slide(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->slide(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bounce(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->bounce(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reflect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->reflect(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sign(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->sign(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_octahedron_encode(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Vector3*) thiz)->octahedron_encode(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->min(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_minf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->minf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->max(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_maxf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Vector3*) thiz)->maxf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_octahedron_decode(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, Vector3::octahedron_decode(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector3 return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector3 return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                float loc_0;
                Vector3 loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3 loc_0;
                Vector3 loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3 loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Vector3 loc_0;
                Vector3 loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3 loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector3 return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_min_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_max_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "angle_to"), v8::FunctionTemplate::New(p_env.isolate, &method_angle_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "signed_angle_to"), v8::FunctionTemplate::New(p_env.isolate, &method_signed_angle_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "direction_to"), v8::FunctionTemplate::New(p_env.isolate, &method_direction_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_squared_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_squared_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length"), v8::FunctionTemplate::New(p_env.isolate, &method_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length_squared"), v8::FunctionTemplate::New(p_env.isolate, &method_length_squared));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "limit_length"), v8::FunctionTemplate::New(p_env.isolate, &method_limit_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_is_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_zero_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_zero_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clamp"), v8::FunctionTemplate::New(p_env.isolate, &method_clamp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clampf"), v8::FunctionTemplate::New(p_env.isolate, &method_clampf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snapped"), v8::FunctionTemplate::New(p_env.isolate, &method_snapped));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snappedf"), v8::FunctionTemplate::New(p_env.isolate, &method_snappedf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rotated"), v8::FunctionTemplate::New(p_env.isolate, &method_rotated));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "lerp"), v8::FunctionTemplate::New(p_env.isolate, &method_lerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slerp"), v8::FunctionTemplate::New(p_env.isolate, &method_slerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cubic_interpolate"), v8::FunctionTemplate::New(p_env.isolate, &method_cubic_interpolate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cubic_interpolate_in_time"), v8::FunctionTemplate::New(p_env.isolate, &method_cubic_interpolate_in_time));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bezier_interpolate"), v8::FunctionTemplate::New(p_env.isolate, &method_bezier_interpolate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bezier_derivative"), v8::FunctionTemplate::New(p_env.isolate, &method_bezier_derivative));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "move_toward"), v8::FunctionTemplate::New(p_env.isolate, &method_move_toward));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "dot"), v8::FunctionTemplate::New(p_env.isolate, &method_dot));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cross"), v8::FunctionTemplate::New(p_env.isolate, &method_cross));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "outer"), v8::FunctionTemplate::New(p_env.isolate, &method_outer));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "floor"), v8::FunctionTemplate::New(p_env.isolate, &method_floor));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "ceil"), v8::FunctionTemplate::New(p_env.isolate, &method_ceil));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "round"), v8::FunctionTemplate::New(p_env.isolate, &method_round));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "posmod"), v8::FunctionTemplate::New(p_env.isolate, &method_posmod));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "posmodv"), v8::FunctionTemplate::New(p_env.isolate, &method_posmodv));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "project"), v8::FunctionTemplate::New(p_env.isolate, &method_project));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slide"), v8::FunctionTemplate::New(p_env.isolate, &method_slide));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bounce"), v8::FunctionTemplate::New(p_env.isolate, &method_bounce));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reflect"), v8::FunctionTemplate::New(p_env.isolate, &method_reflect));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sign"), v8::FunctionTemplate::New(p_env.isolate, &method_sign));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "octahedron_encode"), v8::FunctionTemplate::New(p_env.isolate, &method_octahedron_encode));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min"), v8::FunctionTemplate::New(p_env.isolate, &method_min));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "minf"), v8::FunctionTemplate::New(p_env.isolate, &method_minf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max"), v8::FunctionTemplate::New(p_env.isolate, &method_max));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "maxf"), v8::FunctionTemplate::New(p_env.isolate, &method_maxf));
            function_template->Set(V8Helper::to_string(p_env.isolate, "octahedron_decode"), v8::FunctionTemplate::New(p_env.isolate, &method_octahedron_decode));
            // enums
            {
                v8::Local<v8::ObjectTemplate> enum_obj = v8::ObjectTemplate::New(p_env.isolate);
                function_template->Set(V8Helper::to_string(p_env.isolate, "Axis"), enum_obj);
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_X"), v8::Int32::New(p_env.isolate, 0));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Y"), v8::Int32::New(p_env.isolate, 1));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Z"), v8::Int32::New(p_env.isolate, 2));
            }
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ZERO"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ONE"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "INF"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LEFT"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "RIGHT"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "UP"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DOWN"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FORWARD"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BACK"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MODEL_LEFT"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MODEL_RIGHT"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MODEL_TOP"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MODEL_BOTTOM"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MODEL_FRONT"), &ConstantAccess<Vector3>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MODEL_REAR"), &ConstantAccess<Vector3>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector3>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector3>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Vector3>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Vector3iStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Vector3i();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Vector3i loc_0;
                    if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector3i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector3 loc_0;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector3i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 3)
            {
                int loc_0;
                if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                int loc_1;
                if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                int loc_2;
                if (!StaticBindingUtil<int>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Vector3i(loc_0, loc_1, loc_2);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 10, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector3i*) thiz)->min_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector3i*) thiz)->max_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3i loc_0;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3i*) thiz)->distance_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_squared_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3i loc_0;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector3i*) thiz)->distance_squared_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector3i*) thiz)->length(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length_squared(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector3i*) thiz)->length_squared(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sign(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->sign(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clamp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3i loc_0;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->clamp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clampi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->clampi(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snapped(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3i loc_0;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->snapped(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snappedi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->snappedi(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3i loc_0;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->min(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_mini(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->mini(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3i loc_0;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->max(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_maxi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, ((const Vector3i*) thiz)->maxi(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector3i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector3i return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector3i return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                float loc_0;
                Vector3i loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3i loc_0;
                Vector3i loc_1;
                if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3i loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Vector3i loc_0;
                Vector3i loc_1;
                if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3i return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3i loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3i return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector3i return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3i loc_0;
            Vector3i loc_1;
            if (!StaticBindingUtil<Vector3i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_min_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_max_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_squared_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_squared_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length"), v8::FunctionTemplate::New(p_env.isolate, &method_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length_squared"), v8::FunctionTemplate::New(p_env.isolate, &method_length_squared));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sign"), v8::FunctionTemplate::New(p_env.isolate, &method_sign));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clamp"), v8::FunctionTemplate::New(p_env.isolate, &method_clamp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clampi"), v8::FunctionTemplate::New(p_env.isolate, &method_clampi));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snapped"), v8::FunctionTemplate::New(p_env.isolate, &method_snapped));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snappedi"), v8::FunctionTemplate::New(p_env.isolate, &method_snappedi));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min"), v8::FunctionTemplate::New(p_env.isolate, &method_min));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "mini"), v8::FunctionTemplate::New(p_env.isolate, &method_mini));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max"), v8::FunctionTemplate::New(p_env.isolate, &method_max));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "maxi"), v8::FunctionTemplate::New(p_env.isolate, &method_maxi));
            // enums
            {
                v8::Local<v8::ObjectTemplate> enum_obj = v8::ObjectTemplate::New(p_env.isolate);
                function_template->Set(V8Helper::to_string(p_env.isolate, "Axis"), enum_obj);
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_X"), v8::Int32::New(p_env.isolate, 0));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Y"), v8::Int32::New(p_env.isolate, 1));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Z"), v8::Int32::New(p_env.isolate, 2));
            }
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ZERO"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ONE"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MIN"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MAX"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LEFT"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "RIGHT"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "UP"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DOWN"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FORWARD"), &ConstantAccess<Vector3i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BACK"), &ConstantAccess<Vector3i>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector3i>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector3i>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Vector3i>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Transform2DStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Transform2D();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                Transform2D loc_0;
                if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Transform2D(loc_0);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 2)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector2 loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Transform2D(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 3)
            {
                Vector2 loc_0;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector2 loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Vector2 loc_2;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Transform2D(loc_0, loc_1, loc_2);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 4)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector2 loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Vector2 loc_3;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Transform2D(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 11, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_affine_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->affine_inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_rotation(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Transform2D*) thiz)->get_rotation(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_origin(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Transform2D*) thiz)->get_origin(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_scale(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Transform2D*) thiz)->get_scale(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_skew(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Transform2D*) thiz)->get_skew(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_orthonormalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->orthonormalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rotated(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->rotated(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rotated_local(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->rotated_local(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_scaled(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->scaled(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_scaled_local(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->scaled_local(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_translated(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->translated(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_translated_local(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->translated_local(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_determinant(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Transform2D*) thiz)->determinant(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_basis_xform(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Transform2D*) thiz)->basis_xform(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_basis_xform_inv(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Transform2D*) thiz)->basis_xform_inv(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_interpolate_with(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Transform2D loc_0;
            if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->interpolate_with(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_conformal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Transform2D*) thiz)->is_conformal(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Transform2D loc_0;
            if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Transform2D*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Transform2D*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_looking_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform2D>::set(isolate, context, ((const Transform2D*) thiz)->looking_at(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 rval;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 rval;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_origin(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform2D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, thiz->origin, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_origin(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector2 rval;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Transform2D loc_0;
                Transform2D loc_1;
                if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform2D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Transform2D return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Transform2D>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform2D loc_0;
                float loc_1;
                if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Transform2D return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Transform2D>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform2D loc_0;
                Vector2 loc_1;
                if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector2 loc_0;
                Transform2D loc_1;
                if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform2D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector2 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform2D loc_0;
                Rect2 loc_1;
                if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Rect2>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Rect2 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Rect2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Rect2 loc_0;
                Transform2D loc_1;
                if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform2D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Rect2 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Rect2>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform2D loc_0;
                PackedVector2Array loc_1;
                if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                PackedVector2Array return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<PackedVector2Array>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                PackedVector2Array loc_0;
                Transform2D loc_1;
                if (!StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform2D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                PackedVector2Array return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<PackedVector2Array>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D loc_0;
            Transform2D loc_1;
            if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform2D>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform2D loc_0;
            Transform2D loc_1;
            if (!StaticBindingUtil<Transform2D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform2D>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "affine_inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_affine_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_rotation"), v8::FunctionTemplate::New(p_env.isolate, &method_get_rotation));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_origin"), v8::FunctionTemplate::New(p_env.isolate, &method_get_origin));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_scale"), v8::FunctionTemplate::New(p_env.isolate, &method_get_scale));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_skew"), v8::FunctionTemplate::New(p_env.isolate, &method_get_skew));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "orthonormalized"), v8::FunctionTemplate::New(p_env.isolate, &method_orthonormalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rotated"), v8::FunctionTemplate::New(p_env.isolate, &method_rotated));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rotated_local"), v8::FunctionTemplate::New(p_env.isolate, &method_rotated_local));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "scaled"), v8::FunctionTemplate::New(p_env.isolate, &method_scaled));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "scaled_local"), v8::FunctionTemplate::New(p_env.isolate, &method_scaled_local));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "translated"), v8::FunctionTemplate::New(p_env.isolate, &method_translated));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "translated_local"), v8::FunctionTemplate::New(p_env.isolate, &method_translated_local));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "determinant"), v8::FunctionTemplate::New(p_env.isolate, &method_determinant));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "basis_xform"), v8::FunctionTemplate::New(p_env.isolate, &method_basis_xform));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "basis_xform_inv"), v8::FunctionTemplate::New(p_env.isolate, &method_basis_xform_inv));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "interpolate_with"), v8::FunctionTemplate::New(p_env.isolate, &method_interpolate_with));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_conformal"), v8::FunctionTemplate::New(p_env.isolate, &method_is_conformal));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "looking_at"), v8::FunctionTemplate::New(p_env.isolate, &method_looking_at));
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "IDENTITY"), &ConstantAccess<Transform2D>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_X"), &ConstantAccess<Transform2D>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_Y"), &ConstantAccess<Transform2D>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "origin"),
                v8::FunctionTemplate::New(p_env.isolate, &get_origin),
                v8::FunctionTemplate::New(p_env.isolate, &set_origin)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Transform2D>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Transform2D>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Transform2D>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Vector4StaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Vector4();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Vector4 loc_0;
                    if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector4(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector4i loc_0;
                    if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector4(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 4)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                float loc_3;
                if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Vector4(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 12, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector4*) thiz)->min_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector4*) thiz)->max_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector4*) thiz)->length(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length_squared(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector4*) thiz)->length_squared(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sign(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->sign(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_floor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->floor(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_ceil(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->ceil(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_round(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->round(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_lerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->lerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cubic_interpolate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector4 loc_2;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->cubic_interpolate(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_cubic_interpolate_in_time(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector4 loc_2;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            float loc_5;
            if (!StaticBindingUtil<float>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            float loc_6;
            if (!StaticBindingUtil<float>::get(isolate, context, info[6], loc_6))
            {
                jsb_throw(isolate, "bad param at 6");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->cubic_interpolate_in_time(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_posmod(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->posmod(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_posmodv(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->posmodv(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snapped(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->snapped(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snappedf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->snappedf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clamp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->clamp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clampf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->clampf(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector4*) thiz)->is_normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_direction_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->direction_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector4*) thiz)->distance_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_squared_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector4*) thiz)->distance_squared_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_dot(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector4*) thiz)->dot(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector4*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_zero_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector4*) thiz)->is_zero_approx(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Vector4*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->min(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_minf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->minf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->max(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_maxf(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, ((const Vector4*) thiz)->maxf(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->w, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector4 return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector4 return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                float loc_0;
                Vector4 loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector4 loc_0;
                Vector4 loc_1;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector4 loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Vector4 loc_0;
                Vector4 loc_1;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4 return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector4 loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4 return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector4 return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 loc_0;
            Vector4 loc_1;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_min_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_max_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length"), v8::FunctionTemplate::New(p_env.isolate, &method_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length_squared"), v8::FunctionTemplate::New(p_env.isolate, &method_length_squared));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sign"), v8::FunctionTemplate::New(p_env.isolate, &method_sign));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "floor"), v8::FunctionTemplate::New(p_env.isolate, &method_floor));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "ceil"), v8::FunctionTemplate::New(p_env.isolate, &method_ceil));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "round"), v8::FunctionTemplate::New(p_env.isolate, &method_round));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "lerp"), v8::FunctionTemplate::New(p_env.isolate, &method_lerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cubic_interpolate"), v8::FunctionTemplate::New(p_env.isolate, &method_cubic_interpolate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "cubic_interpolate_in_time"), v8::FunctionTemplate::New(p_env.isolate, &method_cubic_interpolate_in_time));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "posmod"), v8::FunctionTemplate::New(p_env.isolate, &method_posmod));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "posmodv"), v8::FunctionTemplate::New(p_env.isolate, &method_posmodv));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snapped"), v8::FunctionTemplate::New(p_env.isolate, &method_snapped));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snappedf"), v8::FunctionTemplate::New(p_env.isolate, &method_snappedf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clamp"), v8::FunctionTemplate::New(p_env.isolate, &method_clamp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clampf"), v8::FunctionTemplate::New(p_env.isolate, &method_clampf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_is_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "direction_to"), v8::FunctionTemplate::New(p_env.isolate, &method_direction_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_squared_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_squared_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "dot"), v8::FunctionTemplate::New(p_env.isolate, &method_dot));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_zero_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_zero_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min"), v8::FunctionTemplate::New(p_env.isolate, &method_min));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "minf"), v8::FunctionTemplate::New(p_env.isolate, &method_minf));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max"), v8::FunctionTemplate::New(p_env.isolate, &method_max));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "maxf"), v8::FunctionTemplate::New(p_env.isolate, &method_maxf));
            // enums
            {
                v8::Local<v8::ObjectTemplate> enum_obj = v8::ObjectTemplate::New(p_env.isolate);
                function_template->Set(V8Helper::to_string(p_env.isolate, "Axis"), enum_obj);
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_X"), v8::Int32::New(p_env.isolate, 0));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Y"), v8::Int32::New(p_env.isolate, 1));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Z"), v8::Int32::New(p_env.isolate, 2));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_W"), v8::Int32::New(p_env.isolate, 3));
            }
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ZERO"), &ConstantAccess<Vector4>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ONE"), &ConstantAccess<Vector4>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "INF"), &ConstantAccess<Vector4>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "w"),
                v8::FunctionTemplate::New(p_env.isolate, &get_w),
                v8::FunctionTemplate::New(p_env.isolate, &set_w)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector4>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector4>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Vector4>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Vector4iStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Vector4i();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Vector4i loc_0;
                    if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector4i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector4 loc_0;
                    if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Vector4i(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 4)
            {
                int loc_0;
                if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                int loc_1;
                if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                int loc_2;
                if (!StaticBindingUtil<int>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                int loc_3;
                if (!StaticBindingUtil<int>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Vector4i(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 13, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector4i*) thiz)->min_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector4i*) thiz)->max_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector4i*) thiz)->length(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length_squared(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector4i*) thiz)->length_squared(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sign(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->sign(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clamp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4i loc_0;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->clamp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clampi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->clampi(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snapped(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4i loc_0;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->snapped(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_snappedi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->snappedi(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_min(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4i loc_0;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->min(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_mini(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->mini(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4i loc_0;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->max(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_maxi(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, ((const Vector4i*) thiz)->maxi(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4i loc_0;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Vector4i*) thiz)->distance_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_squared_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector4i loc_0;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Vector4i*) thiz)->distance_squared_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Vector4i>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->w, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector4i return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector4i return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                float loc_0;
                Vector4i loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector4i loc_0;
                Vector4i loc_1;
                if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector4i loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4i return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Vector4i loc_0;
                Vector4i loc_1;
                if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4i return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector4i loc_0;
                float loc_1;
                if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4i return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Vector4i return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4i>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4i loc_0;
            Vector4i loc_1;
            if (!StaticBindingUtil<Vector4i>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4i>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_min_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_max_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length"), v8::FunctionTemplate::New(p_env.isolate, &method_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length_squared"), v8::FunctionTemplate::New(p_env.isolate, &method_length_squared));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sign"), v8::FunctionTemplate::New(p_env.isolate, &method_sign));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clamp"), v8::FunctionTemplate::New(p_env.isolate, &method_clamp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clampi"), v8::FunctionTemplate::New(p_env.isolate, &method_clampi));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snapped"), v8::FunctionTemplate::New(p_env.isolate, &method_snapped));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "snappedi"), v8::FunctionTemplate::New(p_env.isolate, &method_snappedi));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min"), v8::FunctionTemplate::New(p_env.isolate, &method_min));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "mini"), v8::FunctionTemplate::New(p_env.isolate, &method_mini));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max"), v8::FunctionTemplate::New(p_env.isolate, &method_max));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "maxi"), v8::FunctionTemplate::New(p_env.isolate, &method_maxi));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_squared_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_squared_to));
            // enums
            {
                v8::Local<v8::ObjectTemplate> enum_obj = v8::ObjectTemplate::New(p_env.isolate);
                function_template->Set(V8Helper::to_string(p_env.isolate, "Axis"), enum_obj);
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_X"), v8::Int32::New(p_env.isolate, 0));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Y"), v8::Int32::New(p_env.isolate, 1));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_Z"), v8::Int32::New(p_env.isolate, 2));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "AXIS_W"), v8::Int32::New(p_env.isolate, 3));
            }
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ZERO"), &ConstantAccess<Vector4i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ONE"), &ConstantAccess<Vector4i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MIN"), &ConstantAccess<Vector4i>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MAX"), &ConstantAccess<Vector4i>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "w"),
                v8::FunctionTemplate::New(p_env.isolate, &get_w),
                v8::FunctionTemplate::New(p_env.isolate, &set_w)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector4i>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Vector4i>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Vector4i>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PlaneStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Plane();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Plane loc_0;
                    if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Plane(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector3 loc_0;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Plane(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                do
                {
                    Vector3 loc_0;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    float loc_1;
                    if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Plane(loc_0, loc_1);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector3 loc_0;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Vector3 loc_1;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Plane(loc_0, loc_1);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 3)
            {
                Vector3 loc_0;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector3 loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Vector3 loc_2;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Plane(loc_0, loc_1, loc_2);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 4)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                float loc_3;
                if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Plane(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 14, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Plane>::set(isolate, context, ((const Plane*) thiz)->normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_center(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Plane*) thiz)->get_center(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Plane loc_0;
            if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Plane*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Plane*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_point_over(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Plane*) thiz)->is_point_over(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_distance_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Plane*) thiz)->distance_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_point(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Plane*) thiz)->has_point(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_project(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Plane*) thiz)->project(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersect_3(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Plane loc_0;
            if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Plane loc_1;
            if (!StaticBindingUtil<Plane>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const Plane*) thiz)->intersect_3(loc_0, loc_1);
        }
        static void method_intersects_ray(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const Plane*) thiz)->intersects_ray(loc_0, loc_1);
        }
        static void method_intersects_segment(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const Plane*) thiz)->intersects_segment(loc_0, loc_1);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_d(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->d, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_d(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_normal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Plane>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->normal, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_normal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane loc_0;
            if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Plane return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Plane>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane loc_0;
            Plane loc_1;
            if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Plane>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Plane loc_0;
            Plane loc_1;
            if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Plane>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_center"), v8::FunctionTemplate::New(p_env.isolate, &method_get_center));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_point_over"), v8::FunctionTemplate::New(p_env.isolate, &method_is_point_over));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "distance_to"), v8::FunctionTemplate::New(p_env.isolate, &method_distance_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_point"), v8::FunctionTemplate::New(p_env.isolate, &method_has_point));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "project"), v8::FunctionTemplate::New(p_env.isolate, &method_project));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersect_3"), v8::FunctionTemplate::New(p_env.isolate, &method_intersect_3));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects_ray"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects_ray));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects_segment"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects_segment));
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PLANE_YZ"), &ConstantAccess<Plane>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PLANE_XZ"), &ConstantAccess<Plane>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PLANE_XY"), &ConstantAccess<Plane>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "d"),
                v8::FunctionTemplate::New(p_env.isolate, &get_d),
                v8::FunctionTemplate::New(p_env.isolate, &set_d)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "normal"),
                v8::FunctionTemplate::New(p_env.isolate, &get_normal),
                v8::FunctionTemplate::New(p_env.isolate, &set_normal)
            );
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Plane>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct QuaternionStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Quaternion();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Quaternion loc_0;
                    if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Quaternion(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Basis loc_0;
                    if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Quaternion(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                do
                {
                    Vector3 loc_0;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    float loc_1;
                    if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Quaternion(loc_0, loc_1);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Vector3 loc_0;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Vector3 loc_1;
                    if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Quaternion(loc_0, loc_1);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 4)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                float loc_3;
                if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Quaternion(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 15, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Quaternion*) thiz)->length(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_length_squared(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Quaternion*) thiz)->length_squared(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_normalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Quaternion*) thiz)->is_normalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Quaternion*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Quaternion*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_log(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->log(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_exp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->exp(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_angle_to(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Quaternion*) thiz)->angle_to(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_dot(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Quaternion*) thiz)->dot(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->slerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slerpni(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->slerpni(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_spherical_cubic_interpolate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Quaternion loc_1;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Quaternion loc_2;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->spherical_cubic_interpolate(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_spherical_cubic_interpolate_in_time(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Quaternion loc_1;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Quaternion loc_2;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            float loc_5;
            if (!StaticBindingUtil<float>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            float loc_6;
            if (!StaticBindingUtil<float>::get(isolate, context, info[6], loc_6))
            {
                jsb_throw(isolate, "bad param at 6");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Quaternion*) thiz)->spherical_cubic_interpolate_in_time(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_euler(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Quaternion*) thiz)->get_euler(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_euler(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, Quaternion::from_euler(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_axis(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Quaternion*) thiz)->get_axis(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_angle(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Quaternion*) thiz)->get_angle(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Quaternion>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->w, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion loc_0;
            Quaternion loc_1;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Quaternion return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion loc_0;
            Quaternion loc_1;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Quaternion return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Quaternion loc_0;
                Quaternion loc_1;
                if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Quaternion return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Quaternion>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Quaternion loc_0;
                float loc_1;
                if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Quaternion return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Quaternion>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                float loc_0;
                Quaternion loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Quaternion return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Quaternion>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3 loc_0;
                Quaternion loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Quaternion loc_0;
                Vector3 loc_1;
                if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion loc_0;
            float loc_1;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Quaternion return_value = loc_0 / loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion loc_0;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Quaternion return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion loc_0;
            Quaternion loc_1;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Quaternion loc_0;
            Quaternion loc_1;
            if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Quaternion>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length"), v8::FunctionTemplate::New(p_env.isolate, &method_length));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "length_squared"), v8::FunctionTemplate::New(p_env.isolate, &method_length_squared));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_normalized"), v8::FunctionTemplate::New(p_env.isolate, &method_is_normalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "log"), v8::FunctionTemplate::New(p_env.isolate, &method_log));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "exp"), v8::FunctionTemplate::New(p_env.isolate, &method_exp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "angle_to"), v8::FunctionTemplate::New(p_env.isolate, &method_angle_to));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "dot"), v8::FunctionTemplate::New(p_env.isolate, &method_dot));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slerp"), v8::FunctionTemplate::New(p_env.isolate, &method_slerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slerpni"), v8::FunctionTemplate::New(p_env.isolate, &method_slerpni));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "spherical_cubic_interpolate"), v8::FunctionTemplate::New(p_env.isolate, &method_spherical_cubic_interpolate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "spherical_cubic_interpolate_in_time"), v8::FunctionTemplate::New(p_env.isolate, &method_spherical_cubic_interpolate_in_time));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_euler"), v8::FunctionTemplate::New(p_env.isolate, &method_get_euler));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_euler"), v8::FunctionTemplate::New(p_env.isolate, &method_from_euler));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_axis"), v8::FunctionTemplate::New(p_env.isolate, &method_get_axis));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_angle"), v8::FunctionTemplate::New(p_env.isolate, &method_get_angle));
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "IDENTITY"), &ConstantAccess<Quaternion>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "w"),
                v8::FunctionTemplate::New(p_env.isolate, &get_w),
                v8::FunctionTemplate::New(p_env.isolate, &set_w)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Quaternion>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Quaternion>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Quaternion>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct AABBStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = AABB();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                AABB loc_0;
                if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = AABB(loc_0);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 2)
            {
                Vector3 loc_0;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector3 loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = AABB(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 16, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_abs(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<AABB>::set(isolate, context, ((const AABB*) thiz)->abs(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_center(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const AABB*) thiz)->get_center(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_volume(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const AABB*) thiz)->get_volume(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_volume(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->has_volume(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_surface(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->has_surface(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_point(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->has_point(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            AABB loc_0;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersects(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            AABB loc_0;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->intersects(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_encloses(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            AABB loc_0;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->encloses(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersects_plane(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Plane loc_0;
            if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const AABB*) thiz)->intersects_plane(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersection(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            AABB loc_0;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<AABB>::set(isolate, context, ((const AABB*) thiz)->intersection(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_merge(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            AABB loc_0;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<AABB>::set(isolate, context, ((const AABB*) thiz)->merge(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_expand(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<AABB>::set(isolate, context, ((const AABB*) thiz)->expand(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_grow(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<AABB>::set(isolate, context, ((const AABB*) thiz)->grow(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_support(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const AABB*) thiz)->get_support(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_longest_axis(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const AABB*) thiz)->get_longest_axis(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_longest_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const AABB*) thiz)->get_longest_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_longest_axis_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const AABB*) thiz)->get_longest_axis_size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_shortest_axis(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const AABB*) thiz)->get_shortest_axis(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_shortest_axis_index(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const AABB*) thiz)->get_shortest_axis_index(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_shortest_axis_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const AABB*) thiz)->get_shortest_axis_size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_endpoint(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const AABB*) thiz)->get_endpoint(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_intersects_segment(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const AABB*) thiz)->intersects_segment(loc_0, loc_1);
        }
        static void method_intersects_ray(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const AABB*) thiz)->intersects_ray(loc_0, loc_1);
        }
        static void get_position(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->position, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_position(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->size, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_end(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB* thiz = nullptr;
            if (!PrimitiveInstanceUtil<AABB>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->end, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_end(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB loc_0;
            AABB loc_1;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<AABB>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB loc_0;
            AABB loc_1;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<AABB>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "abs"), v8::FunctionTemplate::New(p_env.isolate, &method_abs));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_center"), v8::FunctionTemplate::New(p_env.isolate, &method_get_center));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_volume"), v8::FunctionTemplate::New(p_env.isolate, &method_get_volume));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_volume"), v8::FunctionTemplate::New(p_env.isolate, &method_has_volume));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_surface"), v8::FunctionTemplate::New(p_env.isolate, &method_has_surface));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_point"), v8::FunctionTemplate::New(p_env.isolate, &method_has_point));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encloses"), v8::FunctionTemplate::New(p_env.isolate, &method_encloses));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects_plane"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects_plane));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersection"), v8::FunctionTemplate::New(p_env.isolate, &method_intersection));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "merge"), v8::FunctionTemplate::New(p_env.isolate, &method_merge));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "expand"), v8::FunctionTemplate::New(p_env.isolate, &method_expand));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "grow"), v8::FunctionTemplate::New(p_env.isolate, &method_grow));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_support"), v8::FunctionTemplate::New(p_env.isolate, &method_get_support));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_longest_axis"), v8::FunctionTemplate::New(p_env.isolate, &method_get_longest_axis));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_longest_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_get_longest_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_longest_axis_size"), v8::FunctionTemplate::New(p_env.isolate, &method_get_longest_axis_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_shortest_axis"), v8::FunctionTemplate::New(p_env.isolate, &method_get_shortest_axis));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_shortest_axis_index"), v8::FunctionTemplate::New(p_env.isolate, &method_get_shortest_axis_index));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_shortest_axis_size"), v8::FunctionTemplate::New(p_env.isolate, &method_get_shortest_axis_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_endpoint"), v8::FunctionTemplate::New(p_env.isolate, &method_get_endpoint));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects_segment"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects_segment));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "intersects_ray"), v8::FunctionTemplate::New(p_env.isolate, &method_intersects_ray));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "position"),
                v8::FunctionTemplate::New(p_env.isolate, &get_position),
                v8::FunctionTemplate::New(p_env.isolate, &set_position)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "size"),
                v8::FunctionTemplate::New(p_env.isolate, &get_size),
                v8::FunctionTemplate::New(p_env.isolate, &set_size)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "end"),
                v8::FunctionTemplate::New(p_env.isolate, &get_end),
                v8::FunctionTemplate::New(p_env.isolate, &set_end)
            );
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<AABB>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct BasisStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Basis();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Basis loc_0;
                    if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Basis(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Quaternion loc_0;
                    if (!StaticBindingUtil<Quaternion>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Basis(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                Vector3 loc_0;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Basis(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 3)
            {
                Vector3 loc_0;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector3 loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Vector3 loc_2;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Basis(loc_0, loc_1, loc_2);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 17, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, ((const Basis*) thiz)->inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_transposed(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, ((const Basis*) thiz)->transposed(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_orthonormalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, ((const Basis*) thiz)->orthonormalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_determinant(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Basis*) thiz)->determinant(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rotated(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, ((const Basis*) thiz)->rotated(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_scaled(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, ((const Basis*) thiz)->scaled(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_scale(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Basis*) thiz)->get_scale(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_euler(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, ((const Basis*) thiz)->get_euler(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_tdotx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Basis*) thiz)->tdotx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_tdoty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Basis*) thiz)->tdoty(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_tdotz(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Basis*) thiz)->tdotz(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Basis loc_0;
            if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, ((const Basis*) thiz)->slerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_conformal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Basis*) thiz)->is_conformal(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Basis loc_0;
            if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Basis*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Basis*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_rotation_quaternion(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Quaternion>::set(isolate, context, ((const Basis*) thiz)->get_rotation_quaternion(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_looking_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            bool loc_2;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, Basis::looking_at(loc_0, loc_1, loc_2), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_scale(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, Basis::from_scale(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_euler(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, Basis::from_euler(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Basis>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Basis loc_0;
                Basis loc_1;
                if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Basis>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Basis return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Basis>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Basis loc_0;
                float loc_1;
                if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Basis return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Basis>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Basis loc_0;
                Vector3 loc_1;
                if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3 loc_0;
                Basis loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Basis>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis loc_0;
            Basis loc_1;
            if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Basis>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis loc_0;
            Basis loc_1;
            if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Basis>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "transposed"), v8::FunctionTemplate::New(p_env.isolate, &method_transposed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "orthonormalized"), v8::FunctionTemplate::New(p_env.isolate, &method_orthonormalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "determinant"), v8::FunctionTemplate::New(p_env.isolate, &method_determinant));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rotated"), v8::FunctionTemplate::New(p_env.isolate, &method_rotated));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "scaled"), v8::FunctionTemplate::New(p_env.isolate, &method_scaled));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_scale"), v8::FunctionTemplate::New(p_env.isolate, &method_get_scale));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_euler"), v8::FunctionTemplate::New(p_env.isolate, &method_get_euler));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "tdotx"), v8::FunctionTemplate::New(p_env.isolate, &method_tdotx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "tdoty"), v8::FunctionTemplate::New(p_env.isolate, &method_tdoty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "tdotz"), v8::FunctionTemplate::New(p_env.isolate, &method_tdotz));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slerp"), v8::FunctionTemplate::New(p_env.isolate, &method_slerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_conformal"), v8::FunctionTemplate::New(p_env.isolate, &method_is_conformal));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_rotation_quaternion"), v8::FunctionTemplate::New(p_env.isolate, &method_get_rotation_quaternion));
            function_template->Set(V8Helper::to_string(p_env.isolate, "looking_at"), v8::FunctionTemplate::New(p_env.isolate, &method_looking_at));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_scale"), v8::FunctionTemplate::New(p_env.isolate, &method_from_scale));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_euler"), v8::FunctionTemplate::New(p_env.isolate, &method_from_euler));
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "IDENTITY"), &ConstantAccess<Basis>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_X"), &ConstantAccess<Basis>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_Y"), &ConstantAccess<Basis>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_Z"), &ConstantAccess<Basis>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Basis>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Basis>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Basis>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct Transform3DStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Transform3D();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Transform3D loc_0;
                    if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Transform3D(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Projection loc_0;
                    if (!StaticBindingUtil<Projection>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Transform3D(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                Basis loc_0;
                if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector3 loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Transform3D(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 4)
            {
                Vector3 loc_0;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector3 loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Vector3 loc_2;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Vector3 loc_3;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Transform3D(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 18, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_affine_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->affine_inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_orthonormalized(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->orthonormalized(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rotated(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->rotated(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rotated_local(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->rotated_local(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_scaled(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->scaled(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_scaled_local(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->scaled_local(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_translated(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->translated(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_translated_local(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->translated_local(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_looking_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            bool loc_2;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->looking_at(loc_0, loc_1, loc_2), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_interpolate_with(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Transform3D loc_0;
            if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Transform3D>::set(isolate, context, ((const Transform3D*) thiz)->interpolate_with(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Transform3D loc_0;
            if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Transform3D*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_finite(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Transform3D*) thiz)->is_finite(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_basis(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Basis>::set(isolate, context, thiz->basis, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_basis(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Basis rval;
            if (!StaticBindingUtil<Basis>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_origin(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Transform3D>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector3>::set(isolate, context, thiz->origin, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_origin(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector3 rval;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Transform3D loc_0;
                Transform3D loc_1;
                if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform3D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Transform3D return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Transform3D>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform3D loc_0;
                float loc_1;
                if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Transform3D return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Transform3D>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform3D loc_0;
                Vector3 loc_1;
                if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector3 loc_0;
                Transform3D loc_1;
                if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform3D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector3 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector3>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform3D loc_0;
                AABB loc_1;
                if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<AABB>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                AABB return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<AABB>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                AABB loc_0;
                Transform3D loc_1;
                if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform3D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                AABB return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<AABB>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform3D loc_0;
                Plane loc_1;
                if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Plane>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Plane return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Plane>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Plane loc_0;
                Transform3D loc_1;
                if (!StaticBindingUtil<Plane>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform3D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Plane return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Plane>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Transform3D loc_0;
                PackedVector3Array loc_1;
                if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                PackedVector3Array return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<PackedVector3Array>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                PackedVector3Array loc_0;
                Transform3D loc_1;
                if (!StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform3D>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                PackedVector3Array return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<PackedVector3Array>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D loc_0;
            Transform3D loc_1;
            if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform3D>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Transform3D loc_0;
            Transform3D loc_1;
            if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Transform3D>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "affine_inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_affine_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "orthonormalized"), v8::FunctionTemplate::New(p_env.isolate, &method_orthonormalized));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rotated"), v8::FunctionTemplate::New(p_env.isolate, &method_rotated));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rotated_local"), v8::FunctionTemplate::New(p_env.isolate, &method_rotated_local));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "scaled"), v8::FunctionTemplate::New(p_env.isolate, &method_scaled));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "scaled_local"), v8::FunctionTemplate::New(p_env.isolate, &method_scaled_local));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "translated"), v8::FunctionTemplate::New(p_env.isolate, &method_translated));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "translated_local"), v8::FunctionTemplate::New(p_env.isolate, &method_translated_local));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "looking_at"), v8::FunctionTemplate::New(p_env.isolate, &method_looking_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "interpolate_with"), v8::FunctionTemplate::New(p_env.isolate, &method_interpolate_with));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_finite"), v8::FunctionTemplate::New(p_env.isolate, &method_is_finite));
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "IDENTITY"), &ConstantAccess<Transform3D>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_X"), &ConstantAccess<Transform3D>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_Y"), &ConstantAccess<Transform3D>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLIP_Z"), &ConstantAccess<Transform3D>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "basis"),
                v8::FunctionTemplate::New(p_env.isolate, &get_basis),
                v8::FunctionTemplate::New(p_env.isolate, &set_basis)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "origin"),
                v8::FunctionTemplate::New(p_env.isolate, &get_origin),
                v8::FunctionTemplate::New(p_env.isolate, &set_origin)
            );
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Transform3D>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct ProjectionStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Projection();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Projection loc_0;
                    if (!StaticBindingUtil<Projection>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Projection(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Transform3D loc_0;
                    if (!StaticBindingUtil<Transform3D>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Projection(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 4)
            {
                Vector4 loc_0;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Vector4 loc_1;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Vector4 loc_2;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Vector4 loc_3;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Projection(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 19, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_depth_correction(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            bool loc_0;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_depth_correction(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_light_atlas_rect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Rect2 loc_0;
            if (!StaticBindingUtil<Rect2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_light_atlas_rect(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_perspective(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            bool loc_4;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_perspective(loc_0, loc_1, loc_2, loc_3, loc_4), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_perspective_hmd(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            bool loc_4;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            int loc_5;
            if (!StaticBindingUtil<int>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            float loc_6;
            if (!StaticBindingUtil<float>::get(isolate, context, info[6], loc_6))
            {
                jsb_throw(isolate, "bad param at 6");
                return;
            }
            float loc_7;
            if (!StaticBindingUtil<float>::get(isolate, context, info[7], loc_7))
            {
                jsb_throw(isolate, "bad param at 7");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_perspective_hmd(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_for_hmd(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            float loc_5;
            if (!StaticBindingUtil<float>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            float loc_6;
            if (!StaticBindingUtil<float>::get(isolate, context, info[6], loc_6))
            {
                jsb_throw(isolate, "bad param at 6");
                return;
            }
            float loc_7;
            if (!StaticBindingUtil<float>::get(isolate, context, info[7], loc_7))
            {
                jsb_throw(isolate, "bad param at 7");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_for_hmd(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_orthogonal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            float loc_5;
            if (!StaticBindingUtil<float>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_orthogonal(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_orthogonal_aspect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            bool loc_4;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_orthogonal_aspect(loc_0, loc_1, loc_2, loc_3, loc_4), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_frustum(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            float loc_5;
            if (!StaticBindingUtil<float>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_frustum(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_frustum_aspect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            Vector2 loc_2;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            float loc_4;
            if (!StaticBindingUtil<float>::get(isolate, context, info[4], loc_4))
            {
                jsb_throw(isolate, "bad param at 4");
                return;
            }
            bool loc_5;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[5], loc_5))
            {
                jsb_throw(isolate, "bad param at 5");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_frustum_aspect(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create_fit_aabb(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            AABB loc_0;
            if (!StaticBindingUtil<AABB>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, Projection::create_fit_aabb(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_determinant(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Projection*) thiz)->determinant(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_perspective_znear_adjusted(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, ((const Projection*) thiz)->perspective_znear_adjusted(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_projection_plane(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Plane>::set(isolate, context, ((const Projection*) thiz)->get_projection_plane(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_flipped_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, ((const Projection*) thiz)->flipped_y(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_jitter_offseted(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, ((const Projection*) thiz)->jitter_offseted(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_fovy(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, Projection::get_fovy(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_z_far(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Projection*) thiz)->get_z_far(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_z_near(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Projection*) thiz)->get_z_near(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_aspect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Projection*) thiz)->get_aspect(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_fov(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Projection*) thiz)->get_fov(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_orthogonal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Projection*) thiz)->is_orthogonal(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_viewport_half_extents(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Projection*) thiz)->get_viewport_half_extents(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_far_plane_half_extents(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector2>::set(isolate, context, ((const Projection*) thiz)->get_far_plane_half_extents(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Projection>::set(isolate, context, ((const Projection*) thiz)->inverse(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_pixels_per_meter(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Projection*) thiz)->get_pixels_per_meter(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_lod_multiplier(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Projection*) thiz)->get_lod_multiplier(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, thiz->x, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_x(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 rval;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, thiz->y, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_y(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 rval;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, thiz->z, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_z(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 rval;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Projection>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Vector4>::set(isolate, context, thiz->w, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_w(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Vector4 rval;
            if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Projection loc_0;
                Projection loc_1;
                if (!StaticBindingUtil<Projection>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Projection>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Projection return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Projection>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Projection loc_0;
                Vector4 loc_1;
                if (!StaticBindingUtil<Projection>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Vector4>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Vector4 loc_0;
                Projection loc_1;
                if (!StaticBindingUtil<Vector4>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Projection>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Vector4 return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Vector4>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection loc_0;
            Projection loc_1;
            if (!StaticBindingUtil<Projection>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Projection>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Projection loc_0;
            Projection loc_1;
            if (!StaticBindingUtil<Projection>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Projection>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_depth_correction"), v8::FunctionTemplate::New(p_env.isolate, &method_create_depth_correction));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_light_atlas_rect"), v8::FunctionTemplate::New(p_env.isolate, &method_create_light_atlas_rect));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_perspective"), v8::FunctionTemplate::New(p_env.isolate, &method_create_perspective));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_perspective_hmd"), v8::FunctionTemplate::New(p_env.isolate, &method_create_perspective_hmd));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_for_hmd"), v8::FunctionTemplate::New(p_env.isolate, &method_create_for_hmd));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_orthogonal"), v8::FunctionTemplate::New(p_env.isolate, &method_create_orthogonal));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_orthogonal_aspect"), v8::FunctionTemplate::New(p_env.isolate, &method_create_orthogonal_aspect));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_frustum"), v8::FunctionTemplate::New(p_env.isolate, &method_create_frustum));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_frustum_aspect"), v8::FunctionTemplate::New(p_env.isolate, &method_create_frustum_aspect));
            function_template->Set(V8Helper::to_string(p_env.isolate, "create_fit_aabb"), v8::FunctionTemplate::New(p_env.isolate, &method_create_fit_aabb));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "determinant"), v8::FunctionTemplate::New(p_env.isolate, &method_determinant));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "perspective_znear_adjusted"), v8::FunctionTemplate::New(p_env.isolate, &method_perspective_znear_adjusted));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_projection_plane"), v8::FunctionTemplate::New(p_env.isolate, &method_get_projection_plane));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "flipped_y"), v8::FunctionTemplate::New(p_env.isolate, &method_flipped_y));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "jitter_offseted"), v8::FunctionTemplate::New(p_env.isolate, &method_jitter_offseted));
            function_template->Set(V8Helper::to_string(p_env.isolate, "get_fovy"), v8::FunctionTemplate::New(p_env.isolate, &method_get_fovy));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_z_far"), v8::FunctionTemplate::New(p_env.isolate, &method_get_z_far));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_z_near"), v8::FunctionTemplate::New(p_env.isolate, &method_get_z_near));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_aspect"), v8::FunctionTemplate::New(p_env.isolate, &method_get_aspect));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_fov"), v8::FunctionTemplate::New(p_env.isolate, &method_get_fov));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_orthogonal"), v8::FunctionTemplate::New(p_env.isolate, &method_is_orthogonal));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_viewport_half_extents"), v8::FunctionTemplate::New(p_env.isolate, &method_get_viewport_half_extents));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_far_plane_half_extents"), v8::FunctionTemplate::New(p_env.isolate, &method_get_far_plane_half_extents));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverse"), v8::FunctionTemplate::New(p_env.isolate, &method_inverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_pixels_per_meter"), v8::FunctionTemplate::New(p_env.isolate, &method_get_pixels_per_meter));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_lod_multiplier"), v8::FunctionTemplate::New(p_env.isolate, &method_get_lod_multiplier));
            // enums
            {
                v8::Local<v8::ObjectTemplate> enum_obj = v8::ObjectTemplate::New(p_env.isolate);
                function_template->Set(V8Helper::to_string(p_env.isolate, "Planes"), enum_obj);
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "PLANE_NEAR"), v8::Int32::New(p_env.isolate, 0));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "PLANE_FAR"), v8::Int32::New(p_env.isolate, 1));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "PLANE_LEFT"), v8::Int32::New(p_env.isolate, 2));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "PLANE_TOP"), v8::Int32::New(p_env.isolate, 3));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "PLANE_RIGHT"), v8::Int32::New(p_env.isolate, 4));
                enum_obj->Set(V8Helper::to_string(p_env.isolate, "PLANE_BOTTOM"), v8::Int32::New(p_env.isolate, 5));
            }
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "IDENTITY"), &ConstantAccess<Projection>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ZERO"), &ConstantAccess<Projection>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "x"),
                v8::FunctionTemplate::New(p_env.isolate, &get_x),
                v8::FunctionTemplate::New(p_env.isolate, &set_x)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "y"),
                v8::FunctionTemplate::New(p_env.isolate, &get_y),
                v8::FunctionTemplate::New(p_env.isolate, &set_y)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "z"),
                v8::FunctionTemplate::New(p_env.isolate, &get_z),
                v8::FunctionTemplate::New(p_env.isolate, &set_z)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "w"),
                v8::FunctionTemplate::New(p_env.isolate, &get_w),
                v8::FunctionTemplate::New(p_env.isolate, &set_w)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Projection>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Projection>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Projection>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct ColorStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Color();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Color loc_0;
                    if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Color(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    String loc_0;
                    if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Color(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 2)
            {
                do
                {
                    Color loc_0;
                    if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    float loc_1;
                    if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Color(loc_0, loc_1);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    String loc_0;
                    if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    float loc_1;
                    if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Color(loc_0, loc_1);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 3)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Color(loc_0, loc_1, loc_2);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 4)
            {
                float loc_0;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                float loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                float loc_2;
                if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                float loc_3;
                if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Color(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 20, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_argb32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Color*) thiz)->to_argb32(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_abgr32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Color*) thiz)->to_abgr32(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_rgba32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Color*) thiz)->to_rgba32(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_argb64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Color*) thiz)->to_argb64(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_abgr64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Color*) thiz)->to_abgr64(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_rgba64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Color*) thiz)->to_rgba64(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_html(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            bool loc_0;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<String>::set(isolate, context, ((const Color*) thiz)->to_html(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clamp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->clamp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_inverted(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->inverted(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_lerp(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->lerp(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_lightened(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->lightened(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_darkened(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->darkened(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_blend(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->blend(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_luminance(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const Color*) thiz)->get_luminance(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_srgb_to_linear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->srgb_to_linear(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_linear_to_srgb(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, ((const Color*) thiz)->linear_to_srgb(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_equal_approx(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Color*) thiz)->is_equal_approx(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_hex(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, Color::hex(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_hex64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, Color::hex64(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_html(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, Color::html(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_html_is_valid(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, Color::html_is_valid(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_string(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, Color::from_string(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_hsv(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, Color::from_hsv(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_ok_hsl(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            float loc_2;
            if (!StaticBindingUtil<float>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            float loc_3;
            if (!StaticBindingUtil<float>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, Color::from_ok_hsl(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_from_rgbe9995(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, Color::from_rgbe9995(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void get_r(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->r, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_r(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_g(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->g, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_g(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_b(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->b, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_b(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_a(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->a, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_a(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_r8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->r8, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_r8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_g8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->g8, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_g8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_b8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->b8, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_b8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_a8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, thiz->a8, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_a8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            int rval;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_h(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->h, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_h(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_s(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->s, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_s(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void get_v(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Color>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, thiz->v, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void set_v(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            float rval;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
        }
        static void op_ADD(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color loc_0;
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Color return_value = loc_0 + loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_SUBTRACT(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color loc_0;
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Color return_value = loc_0 - loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_MULTIPLY(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Color loc_0;
                Color loc_1;
                if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Color return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Color loc_0;
                float loc_1;
                if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Color return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                float loc_0;
                Color loc_1;
                if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Color return_value = loc_0 * loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_DIVIDE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            do
            {
                Color loc_0;
                Color loc_1;
                if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Color return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            do
            {
                Color loc_0;
                float loc_1;
                if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
                {
                    break;
                }
                Color return_value = loc_0 / loc_1;
                v8::Local<v8::Value> rval;
                if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
                {
                    jsb_throw(isolate, "failed to translate return value");
                    return;
                }
                info.GetReturnValue().Set(rval);
            } while (false);
            jsb_throw(isolate, "no suitable overload");
        }
        static void op_NEGATE(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            Color return_value = -loc_0;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Color>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color loc_0;
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Color loc_0;
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_argb32"), v8::FunctionTemplate::New(p_env.isolate, &method_to_argb32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_abgr32"), v8::FunctionTemplate::New(p_env.isolate, &method_to_abgr32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_rgba32"), v8::FunctionTemplate::New(p_env.isolate, &method_to_rgba32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_argb64"), v8::FunctionTemplate::New(p_env.isolate, &method_to_argb64));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_abgr64"), v8::FunctionTemplate::New(p_env.isolate, &method_to_abgr64));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_rgba64"), v8::FunctionTemplate::New(p_env.isolate, &method_to_rgba64));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_html"), v8::FunctionTemplate::New(p_env.isolate, &method_to_html));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clamp"), v8::FunctionTemplate::New(p_env.isolate, &method_clamp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "inverted"), v8::FunctionTemplate::New(p_env.isolate, &method_inverted));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "lerp"), v8::FunctionTemplate::New(p_env.isolate, &method_lerp));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "lightened"), v8::FunctionTemplate::New(p_env.isolate, &method_lightened));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "darkened"), v8::FunctionTemplate::New(p_env.isolate, &method_darkened));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "blend"), v8::FunctionTemplate::New(p_env.isolate, &method_blend));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_luminance"), v8::FunctionTemplate::New(p_env.isolate, &method_get_luminance));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "srgb_to_linear"), v8::FunctionTemplate::New(p_env.isolate, &method_srgb_to_linear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "linear_to_srgb"), v8::FunctionTemplate::New(p_env.isolate, &method_linear_to_srgb));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_equal_approx"), v8::FunctionTemplate::New(p_env.isolate, &method_is_equal_approx));
            function_template->Set(V8Helper::to_string(p_env.isolate, "hex"), v8::FunctionTemplate::New(p_env.isolate, &method_hex));
            function_template->Set(V8Helper::to_string(p_env.isolate, "hex64"), v8::FunctionTemplate::New(p_env.isolate, &method_hex64));
            function_template->Set(V8Helper::to_string(p_env.isolate, "html"), v8::FunctionTemplate::New(p_env.isolate, &method_html));
            function_template->Set(V8Helper::to_string(p_env.isolate, "html_is_valid"), v8::FunctionTemplate::New(p_env.isolate, &method_html_is_valid));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_string"), v8::FunctionTemplate::New(p_env.isolate, &method_from_string));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_hsv"), v8::FunctionTemplate::New(p_env.isolate, &method_from_hsv));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_ok_hsl"), v8::FunctionTemplate::New(p_env.isolate, &method_from_ok_hsl));
            function_template->Set(V8Helper::to_string(p_env.isolate, "from_rgbe9995"), v8::FunctionTemplate::New(p_env.isolate, &method_from_rgbe9995));
            // constants
            {
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ALICE_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ANTIQUE_WHITE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "AQUA"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "AQUAMARINE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "AZURE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BEIGE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BISQUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BLACK"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BLANCHED_ALMOND"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BLUE_VIOLET"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BROWN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "BURLYWOOD"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CADET_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CHARTREUSE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CHOCOLATE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CORAL"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CORNFLOWER_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CORNSILK"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CRIMSON"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "CYAN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_CYAN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_GOLDENROD"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_KHAKI"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_MAGENTA"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_OLIVE_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_ORANGE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_ORCHID"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_RED"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_SALMON"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_SEA_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_SLATE_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_SLATE_GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_TURQUOISE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DARK_VIOLET"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DEEP_PINK"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DEEP_SKY_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DIM_GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "DODGER_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FIREBRICK"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FLORAL_WHITE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FOREST_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "FUCHSIA"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "GAINSBORO"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "GHOST_WHITE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "GOLD"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "GOLDENROD"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "GREEN_YELLOW"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "HONEYDEW"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "HOT_PINK"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "INDIAN_RED"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "INDIGO"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "IVORY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "KHAKI"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LAVENDER"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LAVENDER_BLUSH"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LAWN_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LEMON_CHIFFON"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_CORAL"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_CYAN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_GOLDENROD"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_PINK"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_SALMON"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_SEA_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_SKY_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_SLATE_GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_STEEL_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIGHT_YELLOW"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIME"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LIME_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "LINEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MAGENTA"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MAROON"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_AQUAMARINE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_ORCHID"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_PURPLE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_SEA_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_SLATE_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_SPRING_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_TURQUOISE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MEDIUM_VIOLET_RED"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MIDNIGHT_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MINT_CREAM"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MISTY_ROSE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "MOCCASIN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "NAVAJO_WHITE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "NAVY_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "OLD_LACE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "OLIVE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "OLIVE_DRAB"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ORANGE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ORANGE_RED"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ORCHID"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PALE_GOLDENROD"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PALE_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PALE_TURQUOISE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PALE_VIOLET_RED"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PAPAYA_WHIP"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PEACH_PUFF"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PERU"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PINK"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PLUM"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "POWDER_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "PURPLE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "REBECCA_PURPLE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "RED"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ROSY_BROWN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "ROYAL_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SADDLE_BROWN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SALMON"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SANDY_BROWN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SEA_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SEASHELL"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SIENNA"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SILVER"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SKY_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SLATE_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SLATE_GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SNOW"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "SPRING_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "STEEL_BLUE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "TAN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "TEAL"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "THISTLE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "TOMATO"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "TRANSPARENT"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "TURQUOISE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "VIOLET"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "WEB_GRAY"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "WEB_GREEN"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "WEB_MAROON"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "WEB_PURPLE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "WHEAT"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "WHITE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "WHITE_SMOKE"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "YELLOW"), &ConstantAccess<Color>::_get);
                function_template->SetLazyDataProperty(V8Helper::to_string(p_env.isolate, "YELLOW_GREEN"), &ConstantAccess<Color>::_get);
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "ADD"), v8::FunctionTemplate::New(p_env.isolate, &op_ADD));
            function_template->Set(V8Helper::to_string(p_env.isolate, "SUBTRACT"), v8::FunctionTemplate::New(p_env.isolate, &op_SUBTRACT));
            function_template->Set(V8Helper::to_string(p_env.isolate, "MULTIPLY"), v8::FunctionTemplate::New(p_env.isolate, &op_MULTIPLY));
            function_template->Set(V8Helper::to_string(p_env.isolate, "DIVIDE"), v8::FunctionTemplate::New(p_env.isolate, &op_DIVIDE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NEGATE"), v8::FunctionTemplate::New(p_env.isolate, &op_NEGATE));
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "r"),
                v8::FunctionTemplate::New(p_env.isolate, &get_r),
                v8::FunctionTemplate::New(p_env.isolate, &set_r)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "g"),
                v8::FunctionTemplate::New(p_env.isolate, &get_g),
                v8::FunctionTemplate::New(p_env.isolate, &set_g)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "b"),
                v8::FunctionTemplate::New(p_env.isolate, &get_b),
                v8::FunctionTemplate::New(p_env.isolate, &set_b)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "a"),
                v8::FunctionTemplate::New(p_env.isolate, &get_a),
                v8::FunctionTemplate::New(p_env.isolate, &set_a)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "r8"),
                v8::FunctionTemplate::New(p_env.isolate, &get_r8),
                v8::FunctionTemplate::New(p_env.isolate, &set_r8)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "g8"),
                v8::FunctionTemplate::New(p_env.isolate, &get_g8),
                v8::FunctionTemplate::New(p_env.isolate, &set_g8)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "b8"),
                v8::FunctionTemplate::New(p_env.isolate, &get_b8),
                v8::FunctionTemplate::New(p_env.isolate, &set_b8)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "a8"),
                v8::FunctionTemplate::New(p_env.isolate, &get_a8),
                v8::FunctionTemplate::New(p_env.isolate, &set_a8)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "h"),
                v8::FunctionTemplate::New(p_env.isolate, &get_h),
                v8::FunctionTemplate::New(p_env.isolate, &set_h)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "s"),
                v8::FunctionTemplate::New(p_env.isolate, &get_s),
                v8::FunctionTemplate::New(p_env.isolate, &set_s)
            );
            prototype_template->SetAccessorProperty(V8Helper::to_string(p_env.isolate, "v"),
                v8::FunctionTemplate::New(p_env.isolate, &get_v),
                v8::FunctionTemplate::New(p_env.isolate, &set_v)
            );
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Color>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Color>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Color>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct NodePathStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = NodePath();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    NodePath loc_0;
                    if (!StaticBindingUtil<NodePath>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = NodePath(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    String loc_0;
                    if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = NodePath(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 22, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_absolute(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const NodePath*) thiz)->is_absolute(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_name_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const NodePath*) thiz)->get_name_count(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_name(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<StringName>::set(isolate, context, ((const NodePath*) thiz)->get_name(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_subname_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const NodePath*) thiz)->get_subname_count(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_hash(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const NodePath*) thiz)->hash(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_subname(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<StringName>::set(isolate, context, ((const NodePath*) thiz)->get_subname(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_concatenated_names(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<StringName>::set(isolate, context, ((const NodePath*) thiz)->get_concatenated_names(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_concatenated_subnames(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<StringName>::set(isolate, context, ((const NodePath*) thiz)->get_concatenated_subnames(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<NodePath>::set(isolate, context, ((const NodePath*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_as_property_path(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<NodePath>::set(isolate, context, ((const NodePath*) thiz)->get_as_property_path(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath* thiz = nullptr;
            if (!PrimitiveInstanceUtil<NodePath>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const NodePath*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath loc_0;
            NodePath loc_1;
            if (!StaticBindingUtil<NodePath>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<NodePath>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            NodePath loc_0;
            NodePath loc_1;
            if (!StaticBindingUtil<NodePath>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<NodePath>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_absolute"), v8::FunctionTemplate::New(p_env.isolate, &method_is_absolute));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_name_count"), v8::FunctionTemplate::New(p_env.isolate, &method_get_name_count));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_name"), v8::FunctionTemplate::New(p_env.isolate, &method_get_name));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_subname_count"), v8::FunctionTemplate::New(p_env.isolate, &method_get_subname_count));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "hash"), v8::FunctionTemplate::New(p_env.isolate, &method_hash));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_subname"), v8::FunctionTemplate::New(p_env.isolate, &method_get_subname));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_concatenated_names"), v8::FunctionTemplate::New(p_env.isolate, &method_get_concatenated_names));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_concatenated_subnames"), v8::FunctionTemplate::New(p_env.isolate, &method_get_concatenated_subnames));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_as_property_path"), v8::FunctionTemplate::New(p_env.isolate, &method_get_as_property_path));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<NodePath>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct RIDStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = RID();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                RID loc_0;
                if (!StaticBindingUtil<RID>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = RID(loc_0);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 23, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_valid(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID* thiz = nullptr;
            if (!PrimitiveInstanceUtil<RID>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const RID*) thiz)->is_valid(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_id(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID* thiz = nullptr;
            if (!PrimitiveInstanceUtil<RID>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const RID*) thiz)->get_id(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID loc_0;
            RID loc_1;
            if (!StaticBindingUtil<RID>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<RID>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID loc_0;
            RID loc_1;
            if (!StaticBindingUtil<RID>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<RID>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID loc_0;
            RID loc_1;
            if (!StaticBindingUtil<RID>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<RID>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID loc_0;
            RID loc_1;
            if (!StaticBindingUtil<RID>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<RID>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID loc_0;
            RID loc_1;
            if (!StaticBindingUtil<RID>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<RID>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            RID loc_0;
            RID loc_1;
            if (!StaticBindingUtil<RID>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<RID>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_valid"), v8::FunctionTemplate::New(p_env.isolate, &method_is_valid));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_id"), v8::FunctionTemplate::New(p_env.isolate, &method_get_id));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<RID>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct CallableStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Callable();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                Callable loc_0;
                if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Callable(loc_0);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 2)
            {
                Object* loc_0;
                if (!StaticBindingUtil<Object*>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                StringName loc_1;
                if (!StaticBindingUtil<StringName>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Callable(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 25, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_create(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            StringName loc_1;
            if (!StaticBindingUtil<StringName>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Callable>::set(isolate, context, Callable::create(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_callv(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Array loc_0;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((const Callable*) thiz)->callv(loc_0);
        }
        static void method_is_null(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Callable*) thiz)->is_null(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_custom(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Callable*) thiz)->is_custom(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_standard(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Callable*) thiz)->is_standard(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_valid(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Callable*) thiz)->is_valid(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_object(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Object*>::set(isolate, context, ((const Callable*) thiz)->get_object(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_object_id(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Callable*) thiz)->get_object_id(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_method(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<StringName>::set(isolate, context, ((const Callable*) thiz)->get_method(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_argument_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Callable*) thiz)->get_argument_count(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_bound_arguments_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Callable*) thiz)->get_bound_arguments_count(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_bound_arguments(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Callable*) thiz)->get_bound_arguments(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_hash(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Callable*) thiz)->hash(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bindv(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Array loc_0;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Callable>::set(isolate, context, ((Callable*) thiz)->bindv(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_unbind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Callable>::set(isolate, context, ((const Callable*) thiz)->unbind(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_call(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Callable*) thiz)->call();
        }
        static void method_call_deferred(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Callable*) thiz)->call_deferred();
        }
        static void method_rpc(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Callable*) thiz)->rpc();
        }
        static void method_rpc_id(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((const Callable*) thiz)->rpc_id(loc_0);
        }
        static void method_bind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Callable>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Callable>::set(isolate, context, ((const Callable*) thiz)->bind(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable loc_0;
            Callable loc_1;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Callable>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Callable loc_0;
            Callable loc_1;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Callable>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            function_template->Set(V8Helper::to_string(p_env.isolate, "create"), v8::FunctionTemplate::New(p_env.isolate, &method_create));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "callv"), v8::FunctionTemplate::New(p_env.isolate, &method_callv));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_null"), v8::FunctionTemplate::New(p_env.isolate, &method_is_null));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_custom"), v8::FunctionTemplate::New(p_env.isolate, &method_is_custom));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_standard"), v8::FunctionTemplate::New(p_env.isolate, &method_is_standard));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_valid"), v8::FunctionTemplate::New(p_env.isolate, &method_is_valid));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_object"), v8::FunctionTemplate::New(p_env.isolate, &method_get_object));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_object_id"), v8::FunctionTemplate::New(p_env.isolate, &method_get_object_id));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_method"), v8::FunctionTemplate::New(p_env.isolate, &method_get_method));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_argument_count"), v8::FunctionTemplate::New(p_env.isolate, &method_get_argument_count));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_bound_arguments_count"), v8::FunctionTemplate::New(p_env.isolate, &method_get_bound_arguments_count));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_bound_arguments"), v8::FunctionTemplate::New(p_env.isolate, &method_get_bound_arguments));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "hash"), v8::FunctionTemplate::New(p_env.isolate, &method_hash));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bindv"), v8::FunctionTemplate::New(p_env.isolate, &method_bindv));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "unbind"), v8::FunctionTemplate::New(p_env.isolate, &method_unbind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "call"), v8::FunctionTemplate::New(p_env.isolate, &method_call));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "call_deferred"), v8::FunctionTemplate::New(p_env.isolate, &method_call_deferred));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rpc"), v8::FunctionTemplate::New(p_env.isolate, &method_rpc));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rpc_id"), v8::FunctionTemplate::New(p_env.isolate, &method_rpc_id));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bind"), v8::FunctionTemplate::New(p_env.isolate, &method_bind));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Callable>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct SignalStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Signal();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                Signal loc_0;
                if (!StaticBindingUtil<Signal>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Signal(loc_0);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 2)
            {
                Object* loc_0;
                if (!StaticBindingUtil<Object*>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                StringName loc_1;
                if (!StaticBindingUtil<StringName>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Signal(loc_0, loc_1);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 26, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_null(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Signal*) thiz)->is_null(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_object(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Object*>::set(isolate, context, ((const Signal*) thiz)->get_object(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_object_id(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Signal*) thiz)->get_object_id(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_name(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<StringName>::set(isolate, context, ((const Signal*) thiz)->get_name(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_connect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((Signal*) thiz)->connect(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_disconnect(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Signal*) thiz)->disconnect(loc_0);
        }
        static void method_is_connected(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Signal*) thiz)->is_connected(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_connections(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Signal*) thiz)->get_connections(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_emit(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Signal>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Signal*) thiz)->emit();
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal loc_0;
            Signal loc_1;
            if (!StaticBindingUtil<Signal>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Signal>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Signal loc_0;
            Signal loc_1;
            if (!StaticBindingUtil<Signal>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Signal>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_null"), v8::FunctionTemplate::New(p_env.isolate, &method_is_null));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_object"), v8::FunctionTemplate::New(p_env.isolate, &method_get_object));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_object_id"), v8::FunctionTemplate::New(p_env.isolate, &method_get_object_id));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_name"), v8::FunctionTemplate::New(p_env.isolate, &method_get_name));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "connect"), v8::FunctionTemplate::New(p_env.isolate, &method_connect));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "disconnect"), v8::FunctionTemplate::New(p_env.isolate, &method_disconnect));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_connected"), v8::FunctionTemplate::New(p_env.isolate, &method_is_connected));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_connections"), v8::FunctionTemplate::New(p_env.isolate, &method_get_connections));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "emit"), v8::FunctionTemplate::New(p_env.isolate, &method_emit));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Signal>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct DictionaryStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Dictionary();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                Dictionary loc_0;
                if (!StaticBindingUtil<Dictionary>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Dictionary(loc_0);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 27, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Dictionary*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Dictionary*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Dictionary*) thiz)->clear();
        }
        static void method_merge(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Dictionary loc_0;
            if (!StaticBindingUtil<Dictionary>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((Dictionary*) thiz)->merge(loc_0, loc_1);
        }
        static void method_merged(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Dictionary loc_0;
            if (!StaticBindingUtil<Dictionary>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Dictionary>::set(isolate, context, ((const Dictionary*) thiz)->merged(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Dictionary*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_all(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Array loc_0;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Dictionary*) thiz)->has_all(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find_key(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((const Dictionary*) thiz)->find_key(loc_0);
        }
        static void method_erase(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((Dictionary*) thiz)->erase(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_hash(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Dictionary*) thiz)->hash(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_keys(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Dictionary*) thiz)->keys(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_values(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Dictionary*) thiz)->values(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            bool loc_0;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Dictionary>::set(isolate, context, ((const Dictionary*) thiz)->duplicate(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Nil loc_1;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const Dictionary*) thiz)->get(loc_0, loc_1);
        }
        static void method_get_or_add(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Nil loc_1;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((Dictionary*) thiz)->get_or_add(loc_0, loc_1);
        }
        static void method_make_read_only(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Dictionary*) thiz)->make_read_only();
        }
        static void method_is_read_only(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Dictionary*) thiz)->is_read_only(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_recursive_equal(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Dictionary>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Dictionary loc_0;
            if (!StaticBindingUtil<Dictionary>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Dictionary*) thiz)->recursive_equal(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary loc_0;
            Dictionary loc_1;
            if (!StaticBindingUtil<Dictionary>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Dictionary>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Dictionary loc_0;
            Dictionary loc_1;
            if (!StaticBindingUtil<Dictionary>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Dictionary>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }

            static void _set_keyed(const v8::FunctionCallbackInfo<v8::Value>& info)
            {
                v8::Isolate* isolate = info.GetIsolate();
                v8::Local<v8::Context> context = isolate->GetCurrentContext();
                jsb_check(info.This()->InternalFieldCount() == IF_VariantFieldCount);
                if (info.Length() != 2)
                {
                    jsb_throw(isolate, "bad params");
                    return;
                }

                //TODO it's restricted since we don't know anything about the type
                Variant key;
                Variant value;
                if (!Realm::js_to_gd_var(isolate, context, info[0], key)
                    || !Realm::js_to_gd_var(isolate, context, info[1], value))
                {
                    jsb_throw(isolate, "bad value");
                    return;
                }
                bool r_valid;
                Variant* self = (Variant*) info.This()->GetAlignedPointerFromInternalField(IF_Pointer);
                self->set_keyed(key, value, r_valid);
                if (!r_valid)
                {
                    jsb_throw(isolate, "invalid call");
                    return;
                }
            }

            static void _get_keyed(const v8::FunctionCallbackInfo<v8::Value>& info)
            {
                v8::Isolate* isolate = info.GetIsolate();
                v8::Local<v8::Context> context = isolate->GetCurrentContext();
                jsb_check(info.This()->InternalFieldCount() == IF_VariantFieldCount);
                if (info.Length() != 1)
                {
                    jsb_throw(isolate, "bad params");
                    return;
                }
                Variant key;
                if (!Realm::js_to_gd_var(isolate, context, info[0], key))
                {
                    jsb_throw(isolate, "bad value");
                    return;
                }
                bool r_valid;
                const Variant* self = (Variant*) info.This()->GetAlignedPointerFromInternalField(IF_Pointer);
                const Variant value = self->get_keyed(key, r_valid);
                if (!r_valid)
                {
                    jsb_throw(isolate, "invalid key?");
                    return;
                }
                v8::Local<v8::Value> r_val;
                if (!Realm::gd_var_to_js(isolate, context, value, r_val))
                {
                    jsb_throw(isolate, "bad translation");
                    return;
                }
                info.GetReturnValue().Set(r_val);
            }

        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "merge"), v8::FunctionTemplate::New(p_env.isolate, &method_merge));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "merged"), v8::FunctionTemplate::New(p_env.isolate, &method_merged));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_all"), v8::FunctionTemplate::New(p_env.isolate, &method_has_all));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find_key"), v8::FunctionTemplate::New(p_env.isolate, &method_find_key));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "erase"), v8::FunctionTemplate::New(p_env.isolate, &method_erase));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "hash"), v8::FunctionTemplate::New(p_env.isolate, &method_hash));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "keys"), v8::FunctionTemplate::New(p_env.isolate, &method_keys));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "values"), v8::FunctionTemplate::New(p_env.isolate, &method_values));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get"), v8::FunctionTemplate::New(p_env.isolate, &method_get));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_or_add"), v8::FunctionTemplate::New(p_env.isolate, &method_get_or_add));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "make_read_only"), v8::FunctionTemplate::New(p_env.isolate, &method_make_read_only));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_read_only"), v8::FunctionTemplate::New(p_env.isolate, &method_is_read_only));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "recursive_equal"), v8::FunctionTemplate::New(p_env.isolate, &method_recursive_equal));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Dictionary>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Dictionary>::_get_indexed));
            // keyed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_keyed"), v8::FunctionTemplate::New(p_env.isolate, &_set_keyed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_keyed"), v8::FunctionTemplate::New(p_env.isolate, &_get_keyed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Dictionary>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct ArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = Array();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedByteArray loc_0;
                    if (!StaticBindingUtil<PackedByteArray>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedInt32Array loc_0;
                    if (!StaticBindingUtil<PackedInt32Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedInt64Array loc_0;
                    if (!StaticBindingUtil<PackedInt64Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedFloat32Array loc_0;
                    if (!StaticBindingUtil<PackedFloat32Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedFloat64Array loc_0;
                    if (!StaticBindingUtil<PackedFloat64Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedStringArray loc_0;
                    if (!StaticBindingUtil<PackedStringArray>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedVector2Array loc_0;
                    if (!StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedVector3Array loc_0;
                    if (!StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedColorArray loc_0;
                    if (!StaticBindingUtil<PackedColorArray>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    PackedVector4Array loc_0;
                    if (!StaticBindingUtil<PackedVector4Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            else if (v8_argc == 4)
            {
                Array loc_0;
                if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                {
                    jsb_throw(isolate, "bad param at 0");
                    return;
                }
                int loc_1;
                if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
                {
                    jsb_throw(isolate, "bad param at 1");
                    return;
                }
                StringName loc_2;
                if (!StaticBindingUtil<StringName>::get(isolate, context, info[2], loc_2))
                {
                    jsb_throw(isolate, "bad param at 2");
                    return;
                }
                Nil loc_3;
                if (!StaticBindingUtil<Nil>::get(isolate, context, info[3], loc_3))
                {
                    jsb_throw(isolate, "bad param at 3");
                    return;
                }
                Variant* instance = Environment::alloc_variant();
                *instance = Array(loc_0, loc_1, loc_2, loc_3);
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 28, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Array*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Array*) thiz)->clear();
        }
        static void method_hash(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->hash(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_assign(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Array loc_0;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->assign(loc_0);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->push_back(loc_0);
        }
        static void method_push_front(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->push_front(loc_0);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->append(loc_0);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Array loc_0;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->append_array(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((Array*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Nil loc_1;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((Array*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->remove_at(loc_0);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->fill(loc_0);
        }
        static void method_erase(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->erase(loc_0);
        }
        static void method_front(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Array*) thiz)->front();
        }
        static void method_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Array*) thiz)->back();
        }
        static void method_pick_random(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Array*) thiz)->pick_random();
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Array*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_pop_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Array*) thiz)->pop_back();
        }
        static void method_pop_front(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Array*) thiz)->pop_front();
        }
        static void method_pop_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->pop_at(loc_0);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Array*) thiz)->sort();
        }
        static void method_sort_custom(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((Array*) thiz)->sort_custom(loc_0);
        }
        static void method_shuffle(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Array*) thiz)->shuffle();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_bsearch_custom(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Nil loc_0;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Callable loc_1;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            bool loc_2;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->bsearch_custom(loc_0, loc_1, loc_2), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Array*) thiz)->reverse();
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            bool loc_0;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Array*) thiz)->duplicate(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            int loc_2;
            if (!StaticBindingUtil<int>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            bool loc_3;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[3], loc_3))
            {
                jsb_throw(isolate, "bad param at 3");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Array*) thiz)->slice(loc_0, loc_1, loc_2, loc_3), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_filter(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Array*) thiz)->filter(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_map(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<Array>::set(isolate, context, ((const Array*) thiz)->map(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reduce(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Nil loc_1;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const Array*) thiz)->reduce(loc_0, loc_1);
        }
        static void method_any(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Array*) thiz)->any(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_all(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Callable loc_0;
            if (!StaticBindingUtil<Callable>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Array*) thiz)->all(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_max(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Array*) thiz)->max();
        }
        static void method_min(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Array*) thiz)->min();
        }
        static void method_is_typed(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Array*) thiz)->is_typed(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_same_typed(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Array loc_0;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Array*) thiz)->is_same_typed(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_typed_builtin(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const Array*) thiz)->get_typed_builtin(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_typed_class_name(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<StringName>::set(isolate, context, ((const Array*) thiz)->get_typed_class_name(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_typed_script(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((const Array*) thiz)->get_typed_script();
        }
        static void method_make_read_only(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((Array*) thiz)->make_read_only();
        }
        static void method_is_read_only(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const Array*) thiz)->is_read_only(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array loc_0;
            Array loc_1;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array loc_0;
            Array loc_1;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array loc_0;
            Array loc_1;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 < loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_LESS_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array loc_0;
            Array loc_1;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 <= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array loc_0;
            Array loc_1;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 > loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_GREATER_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            Array loc_0;
            Array loc_1;
            if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 >= loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "hash"), v8::FunctionTemplate::New(p_env.isolate, &method_hash));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "assign"), v8::FunctionTemplate::New(p_env.isolate, &method_assign));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_front"), v8::FunctionTemplate::New(p_env.isolate, &method_push_front));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "erase"), v8::FunctionTemplate::New(p_env.isolate, &method_erase));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "front"), v8::FunctionTemplate::New(p_env.isolate, &method_front));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "back"), v8::FunctionTemplate::New(p_env.isolate, &method_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "pick_random"), v8::FunctionTemplate::New(p_env.isolate, &method_pick_random));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "pop_back"), v8::FunctionTemplate::New(p_env.isolate, &method_pop_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "pop_front"), v8::FunctionTemplate::New(p_env.isolate, &method_pop_front));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "pop_at"), v8::FunctionTemplate::New(p_env.isolate, &method_pop_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort_custom"), v8::FunctionTemplate::New(p_env.isolate, &method_sort_custom));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "shuffle"), v8::FunctionTemplate::New(p_env.isolate, &method_shuffle));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch_custom"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch_custom));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "filter"), v8::FunctionTemplate::New(p_env.isolate, &method_filter));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "map"), v8::FunctionTemplate::New(p_env.isolate, &method_map));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reduce"), v8::FunctionTemplate::New(p_env.isolate, &method_reduce));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "any"), v8::FunctionTemplate::New(p_env.isolate, &method_any));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "all"), v8::FunctionTemplate::New(p_env.isolate, &method_all));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "max"), v8::FunctionTemplate::New(p_env.isolate, &method_max));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "min"), v8::FunctionTemplate::New(p_env.isolate, &method_min));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_typed"), v8::FunctionTemplate::New(p_env.isolate, &method_is_typed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_same_typed"), v8::FunctionTemplate::New(p_env.isolate, &method_is_same_typed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_typed_builtin"), v8::FunctionTemplate::New(p_env.isolate, &method_get_typed_builtin));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_typed_class_name"), v8::FunctionTemplate::New(p_env.isolate, &method_get_typed_class_name));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_typed_script"), v8::FunctionTemplate::New(p_env.isolate, &method_get_typed_script));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "make_read_only"), v8::FunctionTemplate::New(p_env.isolate, &method_make_read_only));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_read_only"), v8::FunctionTemplate::New(p_env.isolate, &method_is_read_only));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS));
            function_template->Set(V8Helper::to_string(p_env.isolate, "LESS_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_LESS_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER));
            function_template->Set(V8Helper::to_string(p_env.isolate, "GREATER_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_GREATER_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Array>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<Array>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<Array>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedByteArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedByteArray();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedByteArray loc_0;
                    if (!StaticBindingUtil<PackedByteArray>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedByteArray(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedByteArray(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 29, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedByteArray*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedByteArray*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedByteArray*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedByteArray loc_0;
            if (!StaticBindingUtil<PackedByteArray>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedByteArray*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedByteArray*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedByteArray*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedByteArray*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedByteArray*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedByteArray*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedByteArray*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedByteArray*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedByteArray*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedByteArray*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedByteArray*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((PackedByteArray*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_string_from_ascii(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<String>::set(isolate, context, ((const PackedByteArray*) thiz)->get_string_from_ascii(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_string_from_utf8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<String>::set(isolate, context, ((const PackedByteArray*) thiz)->get_string_from_utf8(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_string_from_utf16(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<String>::set(isolate, context, ((const PackedByteArray*) thiz)->get_string_from_utf16(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_string_from_utf32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<String>::set(isolate, context, ((const PackedByteArray*) thiz)->get_string_from_utf32(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_get_string_from_wchar(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<String>::set(isolate, context, ((const PackedByteArray*) thiz)->get_string_from_wchar(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_hex_encode(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<String>::set(isolate, context, ((const PackedByteArray*) thiz)->hex_encode(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_compress(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedByteArray*) thiz)->compress(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decompress(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedByteArray*) thiz)->decompress(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decompress_dynamic(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedByteArray*) thiz)->decompress_dynamic(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_u8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_u8(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_s8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_s8(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_u16(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_u16(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_s16(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_s16(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_u32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_u32(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_s32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_s32(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_u64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_u64(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_s64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_s64(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_half(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_half(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_float(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_float(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_double(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<float>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_double(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_has_encoded_var(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedByteArray*) thiz)->has_encoded_var(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_decode_var(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((const PackedByteArray*) thiz)->decode_var(loc_0, loc_1);
        }
        static void method_decode_var_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedByteArray*) thiz)->decode_var_size(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_int32_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedInt32Array>::set(isolate, context, ((const PackedByteArray*) thiz)->to_int32_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_int64_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedInt64Array>::set(isolate, context, ((const PackedByteArray*) thiz)->to_int64_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_float32_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedFloat32Array>::set(isolate, context, ((const PackedByteArray*) thiz)->to_float32_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_float64_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedFloat64Array>::set(isolate, context, ((const PackedByteArray*) thiz)->to_float64_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_encode_u8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_u8(loc_0, loc_1);
        }
        static void method_encode_s8(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_s8(loc_0, loc_1);
        }
        static void method_encode_u16(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_u16(loc_0, loc_1);
        }
        static void method_encode_s16(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_s16(loc_0, loc_1);
        }
        static void method_encode_u32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_u32(loc_0, loc_1);
        }
        static void method_encode_s32(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_s32(loc_0, loc_1);
        }
        static void method_encode_u64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_u64(loc_0, loc_1);
        }
        static void method_encode_s64(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_s64(loc_0, loc_1);
        }
        static void method_encode_half(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_half(loc_0, loc_1);
        }
        static void method_encode_float(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_float(loc_0, loc_1);
        }
        static void method_encode_double(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedByteArray*) thiz)->encode_double(loc_0, loc_1);
        }
        static void method_encode_var(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedByteArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Nil loc_1;
            if (!StaticBindingUtil<Nil>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            bool loc_2;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[2], loc_2))
            {
                jsb_throw(isolate, "bad param at 2");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedByteArray*) thiz)->encode_var(loc_0, loc_1, loc_2), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray loc_0;
            PackedByteArray loc_1;
            if (!StaticBindingUtil<PackedByteArray>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedByteArray>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedByteArray loc_0;
            PackedByteArray loc_1;
            if (!StaticBindingUtil<PackedByteArray>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedByteArray>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_string_from_ascii"), v8::FunctionTemplate::New(p_env.isolate, &method_get_string_from_ascii));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_string_from_utf8"), v8::FunctionTemplate::New(p_env.isolate, &method_get_string_from_utf8));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_string_from_utf16"), v8::FunctionTemplate::New(p_env.isolate, &method_get_string_from_utf16));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_string_from_utf32"), v8::FunctionTemplate::New(p_env.isolate, &method_get_string_from_utf32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_string_from_wchar"), v8::FunctionTemplate::New(p_env.isolate, &method_get_string_from_wchar));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "hex_encode"), v8::FunctionTemplate::New(p_env.isolate, &method_hex_encode));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "compress"), v8::FunctionTemplate::New(p_env.isolate, &method_compress));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decompress"), v8::FunctionTemplate::New(p_env.isolate, &method_decompress));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decompress_dynamic"), v8::FunctionTemplate::New(p_env.isolate, &method_decompress_dynamic));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_u8"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_u8));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_s8"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_s8));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_u16"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_u16));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_s16"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_s16));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_u32"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_u32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_s32"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_s32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_u64"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_u64));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_s64"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_s64));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_half"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_half));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_float"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_float));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_double"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_double));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has_encoded_var"), v8::FunctionTemplate::New(p_env.isolate, &method_has_encoded_var));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_var"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_var));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "decode_var_size"), v8::FunctionTemplate::New(p_env.isolate, &method_decode_var_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_int32_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_int32_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_int64_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_int64_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_float32_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_float32_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_float64_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_float64_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_u8"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_u8));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_s8"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_s8));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_u16"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_u16));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_s16"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_s16));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_u32"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_u32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_s32"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_s32));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_u64"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_u64));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_s64"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_s64));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_half"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_half));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_float"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_float));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_double"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_double));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "encode_var"), v8::FunctionTemplate::New(p_env.isolate, &method_encode_var));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedByteArray>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedByteArray>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedByteArray>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedInt32ArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedInt32Array();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedInt32Array loc_0;
                    if (!StaticBindingUtil<PackedInt32Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedInt32Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedInt32Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 30, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt32Array*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedInt32Array*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedInt32Array*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedInt32Array*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedInt32Array*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedInt32Array loc_0;
            if (!StaticBindingUtil<PackedInt32Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedInt32Array*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedInt32Array*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedInt32Array*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedInt32Array*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedInt32Array*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedInt32Array*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedInt32Array*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedInt32Array*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedInt32Array>::set(isolate, context, ((const PackedInt32Array*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedInt32Array*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedInt32Array*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedInt32Array*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedInt32Array>::set(isolate, context, ((PackedInt32Array*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt32Array*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt32Array*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt32Array*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array loc_0;
            PackedInt32Array loc_1;
            if (!StaticBindingUtil<PackedInt32Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedInt32Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt32Array loc_0;
            PackedInt32Array loc_1;
            if (!StaticBindingUtil<PackedInt32Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedInt32Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedInt32Array>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedInt32Array>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedInt32Array>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedInt64ArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedInt64Array();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedInt64Array loc_0;
                    if (!StaticBindingUtil<PackedInt64Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedInt64Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedInt64Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 31, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt64Array*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedInt64Array*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedInt64Array*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedInt64Array*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedInt64Array*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedInt64Array loc_0;
            if (!StaticBindingUtil<PackedInt64Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedInt64Array*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedInt64Array*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedInt64Array*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedInt64Array*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedInt64Array*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedInt64Array*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedInt64Array*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedInt64Array*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedInt64Array>::set(isolate, context, ((const PackedInt64Array*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedInt64Array*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedInt64Array*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedInt64Array*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedInt64Array>::set(isolate, context, ((PackedInt64Array*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt64Array*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt64Array*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedInt64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedInt64Array*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array loc_0;
            PackedInt64Array loc_1;
            if (!StaticBindingUtil<PackedInt64Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedInt64Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedInt64Array loc_0;
            PackedInt64Array loc_1;
            if (!StaticBindingUtil<PackedInt64Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedInt64Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedInt64Array>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedInt64Array>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedInt64Array>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedFloat32ArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedFloat32Array();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedFloat32Array loc_0;
                    if (!StaticBindingUtil<PackedFloat32Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedFloat32Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedFloat32Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 32, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat32Array*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedFloat32Array*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedFloat32Array*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedFloat32Array*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedFloat32Array*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedFloat32Array loc_0;
            if (!StaticBindingUtil<PackedFloat32Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedFloat32Array*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedFloat32Array*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedFloat32Array*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedFloat32Array*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedFloat32Array*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedFloat32Array*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedFloat32Array*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedFloat32Array*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedFloat32Array>::set(isolate, context, ((const PackedFloat32Array*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedFloat32Array*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedFloat32Array*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedFloat32Array*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedFloat32Array>::set(isolate, context, ((PackedFloat32Array*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat32Array*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat32Array*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat32Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat32Array*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array loc_0;
            PackedFloat32Array loc_1;
            if (!StaticBindingUtil<PackedFloat32Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedFloat32Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat32Array loc_0;
            PackedFloat32Array loc_1;
            if (!StaticBindingUtil<PackedFloat32Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedFloat32Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedFloat32Array>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedFloat32Array>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedFloat32Array>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedFloat64ArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedFloat64Array();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedFloat64Array loc_0;
                    if (!StaticBindingUtil<PackedFloat64Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedFloat64Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedFloat64Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 33, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat64Array*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedFloat64Array*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedFloat64Array*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedFloat64Array*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedFloat64Array*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedFloat64Array loc_0;
            if (!StaticBindingUtil<PackedFloat64Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedFloat64Array*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedFloat64Array*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            float loc_1;
            if (!StaticBindingUtil<float>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedFloat64Array*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedFloat64Array*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedFloat64Array*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedFloat64Array*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedFloat64Array*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedFloat64Array*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedFloat64Array>::set(isolate, context, ((const PackedFloat64Array*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedFloat64Array*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedFloat64Array*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedFloat64Array*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedFloat64Array>::set(isolate, context, ((PackedFloat64Array*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat64Array*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat64Array*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedFloat64Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            float loc_0;
            if (!StaticBindingUtil<float>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedFloat64Array*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array loc_0;
            PackedFloat64Array loc_1;
            if (!StaticBindingUtil<PackedFloat64Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedFloat64Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedFloat64Array loc_0;
            PackedFloat64Array loc_1;
            if (!StaticBindingUtil<PackedFloat64Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedFloat64Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedFloat64Array>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedFloat64Array>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedFloat64Array>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedStringArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedStringArray();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedStringArray loc_0;
                    if (!StaticBindingUtil<PackedStringArray>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedStringArray(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedStringArray(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 34, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedStringArray*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedStringArray*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            String loc_1;
            if (!StaticBindingUtil<String>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedStringArray*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedStringArray*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedStringArray*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedStringArray loc_0;
            if (!StaticBindingUtil<PackedStringArray>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedStringArray*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedStringArray*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            String loc_1;
            if (!StaticBindingUtil<String>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedStringArray*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedStringArray*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedStringArray*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedStringArray*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedStringArray*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedStringArray*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedStringArray>::set(isolate, context, ((const PackedStringArray*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedStringArray*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedStringArray*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedStringArray*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedStringArray>::set(isolate, context, ((PackedStringArray*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedStringArray*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedStringArray*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedStringArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            String loc_0;
            if (!StaticBindingUtil<String>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedStringArray*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray loc_0;
            PackedStringArray loc_1;
            if (!StaticBindingUtil<PackedStringArray>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedStringArray>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedStringArray loc_0;
            PackedStringArray loc_1;
            if (!StaticBindingUtil<PackedStringArray>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedStringArray>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedStringArray>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedStringArray>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedStringArray>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedVector2ArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedVector2Array();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedVector2Array loc_0;
                    if (!StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedVector2Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedVector2Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 35, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector2Array*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedVector2Array*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedVector2Array*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedVector2Array*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedVector2Array*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedVector2Array loc_0;
            if (!StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedVector2Array*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedVector2Array*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector2 loc_1;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedVector2Array*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedVector2Array*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedVector2Array*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedVector2Array*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedVector2Array*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedVector2Array*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedVector2Array>::set(isolate, context, ((const PackedVector2Array*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedVector2Array*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedVector2Array*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedVector2Array*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedVector2Array>::set(isolate, context, ((PackedVector2Array*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector2Array*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector2Array*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector2Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector2 loc_0;
            if (!StaticBindingUtil<Vector2>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector2Array*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array loc_0;
            PackedVector2Array loc_1;
            if (!StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector2Array loc_0;
            PackedVector2Array loc_1;
            if (!StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedVector2Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedVector2Array>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedVector2Array>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedVector2Array>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedVector3ArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedVector3Array();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedVector3Array loc_0;
                    if (!StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedVector3Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedVector3Array(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 36, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector3Array*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedVector3Array*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedVector3Array*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedVector3Array*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedVector3Array*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedVector3Array loc_0;
            if (!StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedVector3Array*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedVector3Array*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Vector3 loc_1;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedVector3Array*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedVector3Array*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedVector3Array*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedVector3Array*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedVector3Array*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedVector3Array*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedVector3Array>::set(isolate, context, ((const PackedVector3Array*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedVector3Array*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedVector3Array*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedVector3Array*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedVector3Array>::set(isolate, context, ((PackedVector3Array*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector3Array*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector3Array*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedVector3Array>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Vector3 loc_0;
            if (!StaticBindingUtil<Vector3>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedVector3Array*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array loc_0;
            PackedVector3Array loc_1;
            if (!StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedVector3Array loc_0;
            PackedVector3Array loc_1;
            if (!StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedVector3Array>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedVector3Array>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedVector3Array>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedVector3Array>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    struct PackedColorArrayStaticBinding
    {
        static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            if (!info.IsConstructCall())
            {
                jsb_throw(isolate, "bad constructor call");
                return;
            }
            v8::Local<v8::Object> self = info.This();
            const int v8_argc = info.Length();
            const NativeClassID class_id = (const NativeClassID) info.Data().As<v8::Int32>()->Value();
            if (v8_argc == 0)
            {
                Variant* instance = Environment::alloc_variant();
                *instance = PackedColorArray();
                Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
            }
            else if (v8_argc == 1)
            {
                do
                {
                    PackedColorArray loc_0;
                    if (!StaticBindingUtil<PackedColorArray>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedColorArray(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
                do
                {
                    Array loc_0;
                    if (!StaticBindingUtil<Array>::get(isolate, context, info[0], loc_0))
                    {
                        break;
                    }
                    Variant* instance = Environment::alloc_variant();
                    *instance = PackedColorArray(loc_0);
                    Environment::wrap(isolate)->bind_valuetype(class_id, instance, self);
                } while (false);
            }
            jsb_throw(isolate, "no suitable constructor");
        }
        static void _get_constant_value_lazy(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            // temporarily use reflection version for simplicity
            const StringName constant = V8Helper::to_string(isolate, name);
            bool r_valid;
            const Variant constant_value = Variant::get_constant_value((Variant::Type) 37, constant, &r_valid);
            jsb_check(r_valid);
            v8::Local<v8::Value> rval;
            if (!Realm::gd_var_to_js(isolate, context, constant_value, rval))
            {
                jsb_throw(isolate, "bad translate");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_size(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedColorArray*) thiz)->size(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_is_empty(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedColorArray*) thiz)->is_empty(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_set(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            ((PackedColorArray*) thiz)->set(loc_0, loc_1);
        }
        static void method_push_back(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedColorArray*) thiz)->push_back(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((PackedColorArray*) thiz)->append(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_append_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            PackedColorArray loc_0;
            if (!StaticBindingUtil<PackedColorArray>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedColorArray*) thiz)->append_array(loc_0);
        }
        static void method_remove_at(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedColorArray*) thiz)->remove_at(loc_0);
        }
        static void method_insert(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            Color loc_1;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedColorArray*) thiz)->insert(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_fill(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            ((PackedColorArray*) thiz)->fill(loc_0);
        }
        static void method_resize(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedColorArray*) thiz)->resize(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_clear(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedColorArray*) thiz)->clear();
        }
        static void method_has(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, ((const PackedColorArray*) thiz)->has(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_reverse(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedColorArray*) thiz)->reverse();
        }
        static void method_slice(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            int loc_0;
            if (!StaticBindingUtil<int>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedColorArray>::set(isolate, context, ((const PackedColorArray*) thiz)->slice(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_to_byte_array(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedByteArray>::set(isolate, context, ((const PackedColorArray*) thiz)->to_byte_array(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_sort(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            ((PackedColorArray*) thiz)->sort();
        }
        static void method_bsearch(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            bool loc_1;
            if (!StaticBindingUtil<bool>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((PackedColorArray*) thiz)->bsearch(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_duplicate(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<PackedColorArray>::set(isolate, context, ((PackedColorArray*) thiz)->duplicate(), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_find(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedColorArray*) thiz)->find(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_rfind(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            int loc_1;
            if (!StaticBindingUtil<int>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param at 1");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedColorArray*) thiz)->rfind(loc_0, loc_1), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void method_count(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray* thiz = nullptr;
            if (!PrimitiveInstanceUtil<PackedColorArray>::get(isolate, context, info.This(), thiz))
            {
                jsb_throw(isolate, "failed to get this");
                return;
            }
            Color loc_0;
            if (!StaticBindingUtil<Color>::get(isolate, context, info[0], loc_0))
            {
                jsb_throw(isolate, "bad param at 0");
                return;
            }
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<int>::set(isolate, context, ((const PackedColorArray*) thiz)->count(loc_0), rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray loc_0;
            PackedColorArray loc_1;
            if (!StaticBindingUtil<PackedColorArray>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedColorArray>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 == loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static void op_NOT_EQUAL(const v8::FunctionCallbackInfo<v8::Value>& info)
        {
            v8::Isolate* isolate = info.GetIsolate();
            v8::Local<v8::Context> context = isolate->GetCurrentContext();
            PackedColorArray loc_0;
            PackedColorArray loc_1;
            if (!StaticBindingUtil<PackedColorArray>::get(isolate, context, info[0], loc_0) || !StaticBindingUtil<PackedColorArray>::get(isolate, context, info[1], loc_1))
            {
                jsb_throw(isolate, "bad param");
                return;
            }
            bool return_value = loc_0 != loc_1;
            v8::Local<v8::Value> rval;
            if (StaticBindingUtil<bool>::set(isolate, context, return_value, rval))
            {
                jsb_throw(isolate, "failed to translate return value");
                return;
            }
            info.GetReturnValue().Set(rval);
        }
        static NativeClassID static_bind(const FBindingEnv& p_env)
        {
            const StringName& class_name = p_env.type_name;
            const NativeClassID class_id = p_env.environment->add_class(NativeClassType::GodotPrimitive, class_name);
            // constructor
            v8::Local<v8::FunctionTemplate> function_template = v8::FunctionTemplate::New(p_env.isolate, &constructor, v8::Int32::New(p_env.isolate, class_id));
            function_template->InstanceTemplate()->SetInternalFieldCount(IF_VariantFieldCount);
            function_template->SetClassName(p_env.environment->get_string_value(class_name));
            v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
            // methods
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "size"), v8::FunctionTemplate::New(p_env.isolate, &method_size));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "is_empty"), v8::FunctionTemplate::New(p_env.isolate, &method_is_empty));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set"), v8::FunctionTemplate::New(p_env.isolate, &method_set));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "push_back"), v8::FunctionTemplate::New(p_env.isolate, &method_push_back));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append"), v8::FunctionTemplate::New(p_env.isolate, &method_append));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "append_array"), v8::FunctionTemplate::New(p_env.isolate, &method_append_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "remove_at"), v8::FunctionTemplate::New(p_env.isolate, &method_remove_at));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "insert"), v8::FunctionTemplate::New(p_env.isolate, &method_insert));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "fill"), v8::FunctionTemplate::New(p_env.isolate, &method_fill));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "resize"), v8::FunctionTemplate::New(p_env.isolate, &method_resize));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "clear"), v8::FunctionTemplate::New(p_env.isolate, &method_clear));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "has"), v8::FunctionTemplate::New(p_env.isolate, &method_has));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "reverse"), v8::FunctionTemplate::New(p_env.isolate, &method_reverse));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "slice"), v8::FunctionTemplate::New(p_env.isolate, &method_slice));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "to_byte_array"), v8::FunctionTemplate::New(p_env.isolate, &method_to_byte_array));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "sort"), v8::FunctionTemplate::New(p_env.isolate, &method_sort));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "bsearch"), v8::FunctionTemplate::New(p_env.isolate, &method_bsearch));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "duplicate"), v8::FunctionTemplate::New(p_env.isolate, &method_duplicate));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "find"), v8::FunctionTemplate::New(p_env.isolate, &method_find));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "rfind"), v8::FunctionTemplate::New(p_env.isolate, &method_rfind));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "count"), v8::FunctionTemplate::New(p_env.isolate, &method_count));
            // constants
            {
            }
            // operators
            function_template->Set(V8Helper::to_string(p_env.isolate, "EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_EQUAL));
            function_template->Set(V8Helper::to_string(p_env.isolate, "NOT_EQUAL"), v8::FunctionTemplate::New(p_env.isolate, &op_NOT_EQUAL));
            // properties (getset)
            // indexed accessor
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "set_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedColorArray>::_set_indexed));
            prototype_template->Set(V8Helper::to_string(p_env.isolate, "get_indexed"), v8::FunctionTemplate::New(p_env.isolate, &IndexAccess<PackedColorArray>::_get_indexed));
            // wind up
            {
                NativeClassInfo& class_info = p_env.environment->get_native_class(class_id);
                class_info.finalizer = &FinalizerAccess<PackedColorArray>::dealloc;
                class_info.template_.Reset(p_env.isolate, function_template);
                class_info.set_function(p_env.isolate, function_template->GetFunction(p_env.context).ToLocalChecked());
                jsb_check(class_info.template_ == function_template);
                jsb_check(!class_info.template_.IsEmpty());
            }
            return class_id;
        }
    };
    void register_primitive_bindings_static(class Realm* p_realm)
    {
        p_realm->add_class_register((Variant::Type) 5, &Vector2StaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 6, &Vector2iStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 7, &Rect2StaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 8, &Rect2iStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 9, &Vector3StaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 10, &Vector3iStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 11, &Transform2DStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 12, &Vector4StaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 13, &Vector4iStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 14, &PlaneStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 15, &QuaternionStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 16, &AABBStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 17, &BasisStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 18, &Transform3DStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 19, &ProjectionStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 20, &ColorStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 22, &NodePathStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 23, &RIDStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 25, &CallableStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 26, &SignalStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 27, &DictionaryStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 28, &ArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 29, &PackedByteArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 30, &PackedInt32ArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 31, &PackedInt64ArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 32, &PackedFloat32ArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 33, &PackedFloat64ArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 34, &PackedStringArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 35, &PackedVector2ArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 36, &PackedVector3ArrayStaticBinding::static_bind);
        p_realm->add_class_register((Variant::Type) 37, &PackedColorArrayStaticBinding::static_bind);
    }
} // jsb
#endif // JSB_WITH_STATIC_BINDINGS
